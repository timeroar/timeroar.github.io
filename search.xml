<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Security的原理与探索</title>
      <link href="/posts/13835.html"/>
      <url>/posts/13835.html</url>
      
        <content type="html"><![CDATA[<h1>Spring Security 的原理与探索</h1><h3 id="简介">简介</h3><p>本文基于Spring Security 5.5.3版本,文章信息参考SpringSecurity官方文档与博主自身的理解与应用的结合,探索SpringSecurity原理思想 。</p><blockquote><p>官方文档地址 <a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#modules">https://docs.spring.io/spring-security/site/docs/current/reference/html5/#modules</a></p></blockquote><p>本文主要讲解了SpringSecurity的实现思想,原理以及博主个人的一些见解,目的就是让大家对于Spring Security有一定的理解,以便未来更好的在实际当中去运用。</p><h2 id="Spring-Security的设计">Spring Security的设计</h2><p>SpringSecurity的整个设计思想大概是有一个顶级的管理器接口,给予一个特定的实现,由这个实现管理着多个实际操作,带着这个想法去看SpringSecurity的架构与源码,你会非常容易得理解。</p><p>Spring Security实现基于Servlet的Filter,所以要了解Spring Security 首先我们需要了解一下Servlet的Filter处理方式以及Spring如何做集成的,首先我们看一下一个HTTP处理的典型分层</p><h3 id="什么是过滤器">什么是过滤器?</h3><p>客户端向服务应用发送一个请求，容器会创建一个<code>FilterChain</code>(也就是过滤器链)包含了各个<code>Filter</code>,经过各个Filter以后,<code>Servlet</code>根据请求 URI 的路径处理<code>HttpServletRequest</code>并返回<code>HttpServletResponse</code></p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/Filter.png" alt="ServletFilter"></p><p>在Spring Mvc中 一个<code>DispatcherServlet</code>最多可以处理一个<code>HttpServletRequest</code>与一个<code>HttpServletResponse</code>,但是可以经过多个<code>Filter</code>,而<code>Filter</code>不仅可以阻止后续的调用,也可以修改后续使用的<code>HttpServletRequest</code>与<code>HttpServletResponse</code>。大白话的理解就是,用户的请求到你写的Controller之前,有多个过滤器可以对你的请求数据进行篡改或者校验。</p><h3 id="Spring整合Filter">Spring整合Filter</h3><p>在Servlet中,它允许使用自己的注册标准在交互过程中加入Filter,例如实现<code>javax.servlet.Filter</code>的方式,代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是它并不知道由Spring定义的Bean的方式,于是Spring根据Servelt的注册机制,提供了 <code>DelegatingFilterProxy</code>类,它可以将过滤工作委托给Servlet的过滤器,伪代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Lazily get Filter that was registered as a Spring Bean</span>    <span class="token comment">// For the example in DelegatingFilterProxy delegate is an instance of Bean Filter0</span>    <span class="token class-name">Filter</span> delegate <span class="token operator">=</span> <span class="token function">getFilterBean</span><span class="token punctuation">(</span>someBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// delegate work to the Spring Bean</span>    delegate<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此,原本的Servlet过滤链变为了</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/Filter2.png" alt="SpringFilter"></p><h3 id="Spring-Security的核心-SecurityFilterChain">Spring Security的核心-SecurityFilterChain</h3><p>在SpringSecurity中,<code>FilterChainProxy</code>代替了Spring原本的<code>DelegatingFilterProxy</code>它可以让你定义多个<code>SecurityFilterChain</code>,根据你指定的规则,来选择执行哪个过滤器链,当然,它的存在,也方便我们开发人员调试,当然,如果根据你的匹配规则,匹配到多个<code>SecurityFilterChain</code>,他只会调用第一个</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/FilterChainProxy.png" alt="Spring Security 过滤器链"></p><p>Spring Security本身的<code>SecurityFilterChain</code>根据<strong>排序</strong>的<strong>所有</strong>过滤器列表如下显示,方便大家以后根据自己的业务规则定义到某过滤器的前后,甚至替换。数据来源于官方文档。</p><ul><li>ChannelProcessingFilter</li><li>WebAsyncManagerIntegrationFilter</li><li>SecurityContextPersistenceFilter</li><li>HeaderWriterFilter</li><li>CorsFilter</li><li>CsrfFilter</li><li>LogoutFilter</li><li>OAuth2AuthorizationRequestRedirectFilter</li><li>Saml2WebSsoAuthenticationRequestFilter</li><li>X509AuthenticationFilter</li><li>AbstractPreAuthenticatedProcessingFilter</li><li>CasAuthenticationFilter</li><li>OAuth2LoginAuthenticationFilter</li><li>Saml2WebSsoAuthenticationFilter</li><li>UsernamePasswordAuthenticationFilter</li><li>OpenIDAuthenticationFilter</li><li>DefaultLoginPageGeneratingFilter</li><li>DefaultLogoutPageGeneratingFilter</li><li>ConcurrentSessionFilter</li><li>DigestAuthenticationFilter</li><li>BearerTokenAuthenticationFilter</li><li>BasicAuthenticationFilter</li><li>RequestCacheAwareFilter</li><li>SecurityContextHolderAwareRequestFilter</li><li>JaasApiIntegrationFilter</li><li>RememberMeAuthenticationFilter</li><li>AnonymousAuthenticationFilter</li><li>OAuth2AuthorizationCodeGrantFilter</li><li>SessionManagementFilter</li><li>ExceptionTranslationFilter</li><li>FilterSecurityInterceptor</li><li>SwitchUserFilter</li></ul><h2 id="认证与授权">认证与授权</h2><h3 id="大白话理解认证与授权">大白话理解认证与授权</h3><ul><li><p>认证:告诉我你是谁。认证的过程就是解决,你是谁的问题</p></li><li><p>授权:    告诉你,你来我这里只能干什么。授权的过程就是解决,你能做什么的问题</p></li></ul><h2 id="认证">认证</h2><p>Spring Security默认支持的认证机制有很多,包括以下几种方式(数据来源于官方文档)</p><blockquote><ul><li>用户名和密码- 如何使用用户名/密码进行身份验证</li><li>OAuth 2.0 登录- 使用 OpenID Connect 和非标准 OAuth 2.0 登录（QQ快捷登录等）的 OAuth 2.0 登录</li><li>SAML 2.0 登录- SAML 2.0 登录</li><li>中央认证服务器 (CAS) - 中央认证服务器 (CAS) 支持</li><li>记住我- 如何记住用户过去的会话过期</li><li>JAAS 身份验证- 使用 JAAS 进行身份验证</li><li>OpenID - OpenID 身份验证</li><li>预身份验证方案- 使用外部机制(既你自己的原本方式)进行身份验证，但仍使用 Spring Security 进行授权和防止常见漏洞利用。</li><li>X509 认证- X509 认证</li></ul></blockquote><p>知道了SpringSecurity的认证机制,如何去使用以及配置,这就需要去了解Spring Security 架构的组件,而Spring Security的架构组件,则主要包括了以下组件:</p><ul><li><a href="#AuthenticationManager%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86%E5%99%A8">AuthenticationManager</a> -认证管理器:定义Spring Security的各种身份认证如何去执行验证的顶层接口</li><li><a href="#ProviderManager%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E6%96%B9%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%99%A8">ProviderManager</a> - 认证提供方管理器:提供认证的所有提供方的管理器,它是AuthenticationManager的实现,</li><li><a href="#AuthenticationProvider%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E6%96%B9">AuthenticationProvider</a> - 用于ProviderManager被管理的具体认证方式,典型的为<code>DaoAuthenticationProvider</code>,既用户名密码模式</li><li><a href="#AbstractAuthenticationProcessingFilter%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E8%BF%87%E6%BB%A4%E5%99%A8">AbstractAuthenticationProcessingFilter</a> - 身份验证的基础流程过滤器。他是一个抽象方法,保证身份验证流程以及各个部分如何高效的协同工作,最典型的抽象实现类为<code>UsernamePasswordAuthenticationFilter</code></li><li><a href="#AuthenticationEntryPoint%E8%AE%A4%E8%AF%81%E5%85%A5%E5%8F%A3%E7%82%B9">AuthenticationEntryPoint</a> - 认证入口点: 常用于在认证成功或者失败时定义相应状态与头信息(例如认证失败重定向页面,认证失败返回401代码等)</li><li><a href="#Authentication%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF">Authentication</a> - 认证信息: 已通过认证的认证信息以及凭证信息,通常存放的是用户名权限等常用信息</li><li><a href="#GrantedAuthority%E6%8B%A5%E6%9C%89%E7%9A%84%E6%9D%83%E9%99%90">GrantedAuthority</a> - 授予权限: 授予主体Authentication所携带的认证信息相应的权限,可以理解为你有个User实体类,这个实体类包含了一个List<Role>的数据,User就是Authentication,List<Role>就是GrantedAuthority</li><li>[SecurityContextHolder](#SecurityContextHolder 安全上下文的持有类) -  安全上下文的持有类:Spring Security 存储身份验证信息的地方,既存放的SecurityContextHolder的相关信息。</li><li><a href="#SecurityContext%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87">SecurityContext</a> - 安全上下文:可以从当前经过身份验证的用户中获取用户的Authentication信息。</li></ul><p>现在我们开始根据SpringSecurity的认证流程看看上面的架构组件是如何整合在一起的</p><h3 id="Authentication认证信息">Authentication认证信息</h3><p>认证信息,为SpringSecurity在认证中的基础接口,也是核心接口,它定义了认证信息所需要的信息,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Authentication</span> <span class="token keyword">extends</span> <span class="token class-name">Principal</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getPrincipal():举例在用户名密码模式当中,指用户名信息</li><li>getCredentials():举例在用户名密码模式当中,指密码信息</li><li>getDetails(); 举例在用户名密码模式当中,指<code>UserDetails</code>,它包含了用户的一些基本信息,类似于我们平常对应user表的类</li><li>getAuthorities();当前认证用户的权限集合</li><li>isAuthenticated();是否认证成功</li></ul><p>它在SpringSecurity认证流转过程当中存在两种状态:</p><ul><li>用户输入的凭证信息,由AuthenticationManager管理期间,此时<code>isAuthenticated()</code>为false</li><li>已经经过身份认证的用户信息,它存在于SecurityContext,此时<code>isAuthenticated()</code>应为true</li></ul><h3 id="GrantedAuthority拥有的权限">GrantedAuthority拥有的权限</h3><p>根据SpringSecurity官方定义:</p><blockquote><p>GrantedAuthoritys can be obtained from the Authentication.getAuthorities() method. This method provides a Collection of GrantedAuthority objects. A GrantedAuthority is, not surprisingly, an authority that is granted to the principal. Such authorities are usually “roles”, such as ROLE_ADMINISTRATOR or ROLE_HR_SUPERVISOR. These roles are later on configured for web authorization, method authorization and domain object authorization.</p></blockquote><p>通俗点说,就是根据业务系统需求,来定义用户权限或者角色的地方,它可以通过Authentication中的getAuthorities()来获取</p><h3 id="SecurityContextHolder-安全上下文的持有类">SecurityContextHolder 安全上下文的持有类</h3><p>它是SpringSecurity中核心,是存储着已认证用户详细信息的地方,在SpringSecurity认证过程当中,它并不关心<code>SecurityContextHolder</code>中的用户信息数据是如何产生的,只要把相应认证信息填充,SpringSecurity就认为它是经过认证的用户</p><p>举例说明,如果我们使用自己原本的授权模型,而不去添加过滤链,我们可以这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password123456"</span><span class="token punctuation">,</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样,我们就得到了一个已认证的用户信息,如果我们在实际业务当中获取当前用户信息,我们就可以这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//登录认证的用户名</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//权限集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以随时在我们的业务中获取定义的用户信息</p><h3 id="SecurityContext安全上下文">SecurityContext安全上下文</h3><p>它是SpringSecurity的一个顶层接口,比较像我们平时使用的实体类,作用就是得到,或者加入一个认证信息,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContext</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>存入到<code>SecurityContext</code>中的<code>Authentication</code>为认证成功数据。</p><p>上面四个是SpringSecurity基础核心,他们存在与整个认证授权期间的各个节点,现在,我们正式的去认知一下SpringSecurity的认证是如何做的,首先我们去看一下整个流程涉及到的一个关键<code>AuthenticationManager</code></p><h3 id="AuthenticationManager认证管理器">AuthenticationManager认证管理器</h3><p>引用SpringSecurity官方文档的解释是</p><blockquote><p>AuthenticationManager is the API that defines how Spring Security’s Filters perform authentication.</p></blockquote><p>意思就是,认证管理器是SpringSecurity如何去执行身份认证的Api 。AuthenticationManager的源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationManager</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>AuthenticationManager属于顶层接口,它提供一个接口方法,用于身份校验,并返回一个校验后的认证信息,至于校验的规则,他留给了子类去实现,在Spring给予的实现中我们经常接触的就是ProviderManager</p><h3 id="ProviderManager认证提供方统一管理器">ProviderManager认证提供方统一管理器</h3><p>同样引用官网解释</p><blockquote><p>ProviderManager delegates to a List of AuthenticationProviders. Each AuthenticationProvider has an opportunity to indicate that authentication should be successful, fail, or indicate it cannot make a decision and allow a downstream AuthenticationProvider to decide.</p></blockquote><p>可以解释为:认证提供方同一管理器管理着多个AuthenticationProvider(具体认证提供方),每个Provider都可以表明他是认证成功,失败,或者它无法确定是否验证成功,交给其他AuthenticationProvider处理,老常例,看源码,源码是最好的老师。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderManager</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationManager</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Authentication</span><span class="token punctuation">></span></span> toTest <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">/** 循环遍历所有管理的provider */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationProvider</span> provider <span class="token operator">:</span> <span class="token function">getProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>toTest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">/** 尝试去认证 */</span>result <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">copyDetails</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccountStatusException</span> <span class="token operator">|</span> <span class="token class-name">InternalAuthenticationServiceException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">prepareException</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>lastException <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eraseCredentialsAfterAuthentication <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">/** 清除敏感信息 */</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">throw</span> lastException<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只保留了核心方法<code>authenticate()</code>,由源码可以知道他做了以下步骤:</p><ul><li>循环遍历所有管理的Provider,并且判定当前Provier是否支持当前类型的<code>Authentication</code>的认证</li><li>如果当前Provider支持该类型,则尝试去认证</li><li>如果抛出<code>AccountStatusException</code>账户状态异常或<code>InternalAuthenticationServiceException</code>服务器内部异常,则直接抛出异常,认证失败</li><li>如果抛出<code>AuthenticationException</code>,则记录当前异常继续循环,看看是否有其他provider支持其认证</li><li>如果正常返回<code>Authentication</code>,则认证成功,清除掉<code>Authentication</code>当中的<code>credentials</code>信息,因为它通常是我们的密码,然后返回给<strong>认证流程引擎</strong>(下文会说)</li></ul><p>由上文中,我们有引申出来两个概念,既provider跟认证流程引擎,接下来一起看下<code>AuthenticationProvider</code></p><h3 id="AuthenticationProvider认证提供方">AuthenticationProvider认证提供方</h3><p>认证提供方就是身份验证的具体操作,它依旧是有一个顶层接口,由子类去实现,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationProvider</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它一共定义了两个接口方法,一个是<code>authenticate</code>的认证接口方法,一个是<code>support</code>可支持的类型的判定方法,在<code>authenticate</code>方法中,你会发现传入与返回都是<code>Authentication</code>,他们最大的区别是传入参数的<code>authentication</code>是未认证的,它的<code>isAuthenticated()</code>是false,而返回的<code>Authentication</code>则是已认证的,<code>isAuthenticated()</code>返回为true。</p><p>SpringSecurity对<code>AuthenticationProvider</code>的实现很多,比较常见实现类为<code>DaoAuthenticationProvider</code> 既用户名密码认证,以及<code>JwtAuthenticationProvider</code> JWT令牌验证。</p><h3 id="AuthenticationEntryPoint认证入口点">AuthenticationEntryPoint认证入口点</h3><p>它在SpringSecurity的官方文档中,是这样描述的</p><blockquote><p>Sometimes a client will proactively include credentials such as a username/password to request a resource. In these cases, Spring Security does not need to provide an HTTP response that requests credentials from the client since they are already <a href="http://included.In">included.In</a> other cases, a client will make an unauthenticated request to a resource that they are not authorized to access. In this case, an implementation of <code>AuthenticationEntryPoint</code> is used to request credentials from the client.</p></blockquote><p>大致的意思就是,如果请求携带了凭证信息(既用户名密码或者token) SpringSecurity不需要去提供对应请求的响应。但是在其他越权访问时,会通过实现<code>AuthenticationEntryPoint</code>的方式,来重定向等响应.</p><p>大家看了官网的解释,有没有觉得他确实是入口,但是不是很抽象呢,其实我更想说它是越权访问的处理类,这样是不是更形象呢?</p><p>他的源码只有一个接口定义方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由子类去实现越权访问后的信息。</p><p>这样,我们的认证管理器也了解了,现在正是通过流程核心<code>AbstractAuthenticationProcessingFilter</code>将所有认证过程串联起来</p><h3 id="AbstractAuthenticationProcessingFilter认证流程引擎过滤器">AbstractAuthenticationProcessingFilter认证流程引擎过滤器</h3><p><code>AbstractAuthenticationProcessingFilter</code>是各种认证流程的父类,它封装了基本认证流程中的通用环节,核心处理由子类去实现,关键源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAuthenticationProcessingFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span><span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceAware</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/** 认证管理器 */</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token comment">/** 认证成功后的处理器 */</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedRequestAwareAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 认证失败后的处理器 */</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> failureHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requiresAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> authenticationResult <span class="token operator">=</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">successfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> authenticationResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> failed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** 判断是否需要身份认证 */</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">requiresAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/** 开始认证,由子类去实现 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token comment">/** 认证成功处理逻辑 */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">successfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span><span class="token class-name">Authentication</span> authResult<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>successHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> authResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** 认证失败处理逻辑 */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>failureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文中我只保留了关键的代码,由源码我们可以知道<code>AbstractAuthenticationProcessingFilter</code>过滤流程为:</p><ul><li>判断当前request是否需要认证,如果不需要,则放行</li><li>由子类去实现认证逻辑并尝试去认证,如果认证成功则返回<code>Authentication</code></li><li>如果认证结果成功返回<code>Authentication</code>则将认证信息放入<code>SecurityContext</code>当中并调用<code>AuthenticationSuccessHandler</code>中的<code>onAuthenticationSuccess()</code>方法</li><li>如果认证抛出<code>InternalAuthenticationServiceException</code>或<code>AuthenticationException</code>异常,则清空<code>SecurityContextHolder</code>上下文信息,并调用<code>AuthenticationFailureHandler</code>中的<code>onAuthenticationFailure()</code>方法</li></ul><p>从上文中,我们知道了认证的整体流程,但是认证过程中的关键调用<code>attemptAuthentication()</code> 它的细节我们并不知道,本文就以它的子类<code>UsernamePasswordAuthenticationFilter</code>用户名密码模式来分析下它的具体流程,下面就以<code>UsernamePasswordAuthenticationFilter</code>举例:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/authentication.png" alt="认证流程"></p><p>上面图中,我们知道了流程,实现方式,我们再结合源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>postOnly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"Authentication method not supported: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    username <span class="token operator">=</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> username <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    password <span class="token operator">=</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> password <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Allow subclasses to set the "details" property</span>    <span class="token function">setDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由源码可知:</p><ol><li>当用户提交认证信息凭证时<code>UsernamePasswordAuthenticationFilter</code>中根据request信息调用<code>attemptAuthentication()</code>方法创建<code>UsernamePasswordAuthenticationToken</code>从而获得一个<code>Authentication</code>对象,<code>UsernamePasswordAuthenticationToken</code>即为<code>Authentication</code>的一个具体实现</li><li>将<code>Authentication</code>传递给<code>AuthenticationManager</code>进行身份认证</li><li>认证成功,则返回<code>Authentication</code>,认证失败,则参考 <a href="#ProviderManager%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E6%96%B9%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%99%A8">ProviderManager</a></li></ol><p>这样,我们就把整个认证过程都串联起来了。</p><h2 id="权限">权限</h2><p>从上文中,我们已经了解到了SpringSecurity强大的认证功能,已经强大的可拓展性,现在,我们了解下SpringSecurity的授权机制。授权的过程,你会发现与认证流程有着惊人的相似点。</p><p>在SpringSecurity的授权过程当中,同样有一个过滤链,而这个过滤链的抽象父类就是<code>AbstractSecurityInterceptor</code></p><h3 id="AbstractSecurityInterceptor权限过滤链拦截的抽象类">AbstractSecurityInterceptor权限过滤链拦截的抽象类</h3><p>我们先根据源码看看<code>AbstractSecurityInterceptor</code>重点做了哪些事情</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSecurityInterceptor</span>        <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceAware</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 校验受保护对象所需要的权限是否可被支持 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validateAttributeDefs</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributeDefs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 在受保护对象被调用之前的操作 */</span>    <span class="token keyword">protected</span> <span class="token class-name">InterceptorStatusToken</span> <span class="token function">beforeInvocation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 尝试执行授权操作 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptAuthorization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">,</span>                                      <span class="token class-name">Authentication</span> authenticated<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 调用结束后的相关清理工作 */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finallyInvocation</span><span class="token punctuation">(</span><span class="token class-name">InterceptorStatusToken</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/** 在受保护对象被调用之后的操作 */</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">afterInvocation</span><span class="token punctuation">(</span><span class="token class-name">InterceptorStatusToken</span> token<span class="token punctuation">,</span> <span class="token class-name">Object</span> returnedObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringSecurity的权限主要分为方法调用前,以及方法调用后,拦截的方案分别由两个管理器管理,他们是:</p><ul><li>方法调用前的: <a href="#AccessDecisionManager%E8%AE%BF%E9%97%AE%E5%86%B3%E7%AD%96%E7%AE%A1%E7%90%86%E5%99%A8">AccessDecisionManager</a>-访问决策管理器</li><li>方法调用后的: <a href="#AfterInvocationManager%E8%B0%83%E7%94%A8%E5%90%8E%E7%BD%AE%E7%AE%A1%E7%90%86%E5%99%A8">AfterInvocationManager</a>-调用后置管理器</li></ul><p>这里额外说明一下<code>Collection&lt;ConfigAttribute&gt; attributes</code>,这里指的是受保护对象需要被访问时所需要的权限集合,这个属性在后续操作中多次被用到。</p><p>对于<code>AbstractSecurityInterceptor</code>抽象实现,SpringSecurity对于此抽象的实现一共有3个:</p><ul><li>FilterSecurityInterceptor 过滤器拦截方式-通过实现Filter的方式进行验证</li><li>MethodSecurityInterceptor 方法拦截-通过实现Spring方法拦截的接口MethodInterceptor进行验证</li><li>AspectJMethodSecurityInterceptor 切面拦截,继承MethodSecurityInterceptor,使其通过aop的方式进行拓展实现</li></ul><h3 id="FilterSecurityInterceptor过滤器权限拦截">FilterSecurityInterceptor过滤器权限拦截</h3><p>我们根据官方提供的图,看看<code>FilterSecurityInterceptor</code>做了哪些事情</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/filtersecurityinterceptor.png" alt="权限过滤流程实例"></p><p>现在我们来看看验证权限的流程,我们就按照FilterSecurityIntercepter的流程走:</p><ol><li><code>FilterSecurityInterceptor</code>通过SecurityContextHolder得到认证的<code>Authentication</code>信息</li><li><code>FilterSecurityInterceptor</code>在<code>doFilter()</code>方法中,根据<code>HttpServletRequest</code>,<code>HttpServletResponse</code>,<code>FilterChain</code>创建<code>FilterInvocation</code>对象</li><li>通过执行父类的<code>beforeInvocation()</code>方法从<code>SecurityMetadataSource</code>中获取被保护对象所需要的权限</li><li>接着将<code>FilterInvocation</code>,<code>Authentication</code>跟<code>ConfigAttributes</code>三个参数调用<code>attemptAuthorization()</code>方法,交给<code>AccessDecisionManager</code>去执行。</li><li>如果授权失败,则抛出<code>AccessDeiedException</code>异常</li><li>如果授权成功,则正常处理request请求</li></ol><p>由上述流程可知,主要判断是否授权成功与否的决策器是<code>AccessDecisionManager</code>,受保护对象的所需权限,由<code>SecurityMetadataSource</code>整理并返回,而认证的权限来源则我们需要先再回顾一下<code>GrantedAuthority</code>,它代表着当前用户所拥有的权限列表,它是用<code>AuthenticationManager</code>认证后,设置到<code>Authentication</code>里面的,它的方法在源码中只有一个,如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GrantedAuthority</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的返回值为String类型,意味着你必须提供一个精准的字符串作为权限信息,使其能够被权限的管理器<code>AccessDecisionManager</code> 精准的判定。</p><p>SpringSecurity对于<code>AccessDecisionManager</code>实现,使用了投票机制的方式,如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/access-decision-voting.png" alt="投票机制"></p><p>整体思路就是,由实现<code>AccessDecisionVoter</code>的各个投票器进行投票,由<code>AccessDecisionManager</code>对投票结果进行处理,判定用户是否授权通过。现在我们对于<code>AccessDecisionManager</code>跟<code>AccessDecisionVoter</code>进行详细介绍</p><h2 id="AccessDecisionManager访问决策管理器">AccessDecisionManager访问决策管理器</h2><p><code>AccessDecisionManager</code>是由<code>AbstractSecurityInterceptor</code>(这是验权过程当中的一个过滤链的父类抽象,后文会详细介绍) 调用的，它负责鉴定用户是否有访问对应资源（方法或URL）的权限,源码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**     * 通过传递的参数来决定用户是否有访问对应受保护对象的权限     *     * @param authentication 当前正在请求受包含对象的Authentication     * @param object 受保护对象，其可以是一个MethodInvocation。     * @param configAttributes 与正在请求的受保护对象相关联的配置属性     */</span><span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientAuthenticationException</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>decide()方法有三个参数,已在注释当中对其进行说明,作用就是,<code>authentication</code>的权限信息,是否符合<code>object</code>受保护对象要求的<code>configAttributes</code>,简单的例子就是访问<strong>删除用户</strong>方法需要<code>admin</code>权限,此时<strong>用户张三</strong>需要访问这个方法,张三的<code>authentication</code>里的权限信息,是否存在<strong>删除用户</strong>方法所需要的<code>admin</code>角色。</li><li>support方法有两个,第一个则代表的是当前的<code>AccessDecisionManager</code>是否支持并且能够处理对应的configAttributes,第二个则是受保护的对象类型是否支持</li></ul><p>由图可以,Spring官方提供了三种不同的决策器,分别是<code>AffirmativeBased</code>、<code>ConsensusBased</code>和<code>UnanimousBased</code>,统一继承自抽象父类<code>AccessDecisionManager</code>,现在我们看一下三种决策器的源码,去分析出他们是如何决策的。</p><h3 id="投票决策器-AffirmativeBased">投票决策器-AffirmativeBased</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AffirmativeBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">AffirmativeBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> deny <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> configAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span>deny<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deny <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码,我们可以看到,只有当<code>deny &gt; 0</code>的时候,才会抛出异常,但是大于0的情况只会出现在第二个<code>case</code>的情况,由此我们可以得出的结论是:</p><ul><li>如果有一票是赞成票,则授权通过</li><li>如果没有一票是赞成票,但是有投反对票的,则抛出<code>AccessDeniedException</code>异常,授权不通过</li><li>如果没有赞成票,也没有反对票,则授权通过</li></ul><h3 id="投票决策器-ConsensusBased">投票决策器-ConsensusBased</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsensusBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> allowIfEqualGrantedDeniedDecisions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ConsensusBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> grant <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> deny <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> configAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span>grant<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span>deny<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grant <span class="token operator">></span> deny<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deny <span class="token operator">></span> grant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>grant <span class="token operator">==</span> deny<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>grant <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowIfEqualGrantedDeniedDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAllowIfEqualGrantedDeniedDecisions</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions <span class="token operator">=</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>废话不多说,直接看哪个地方抛出了<code>AccessDeniedException</code>,通过源码我们可以看到<code>deny</code>为反对票,<code>grant</code>为赞成票,当<code>deny &gt; grant</code>的时候会驳回,以及<code>grant</code>等于<code>deny</code>并且<code>grant</code>不为0的情况下,根据系统设置判定是否驳回。由此我们可以得出结论:</p><ul><li>如果赞成票多于反对票,则授权通过</li><li>如果反对票多于赞成票,则授权失败</li><li>如果赞成票等于反对票,并且赞成票不等于0,视系统设置而定,如果参数<code>allowIfEqualGrantedDeniedDecisions</code>为true则授权通过,反之则授权失败,<code>allowIfEqualGrantedDeniedDecisions</code>默认为true</li><li>如果全部弃票,则视父类抽象<code>AbstractAccessDecisionManager</code>中的<code>allowIfAllAbstainDecisions</code>值来定,如果参数<code>allowIfAllAbstainDecisions</code>为true则授权通过,反之则授权失败,<code>allowIfEqualGrantedDeniedDecisions</code>默认为false</li></ul><h3 id="投票决策器-UnanimousBased">投票决策器-UnanimousBased</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnanimousBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">UnanimousBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> grant <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> singleAttributeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleAttributeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>singleAttributeList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> singleAttributeList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span>grant<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, there were no deny votes</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grant <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据源码,我们可知道,<code>UnanimousBased</code>是根据属性以及其他投票器的投票结果,来确定是否通过的,而源码中的驳回只有在第二个case种出现,它是在其他投票器中被抉择为fasle的,而且<code>UnanimousBased</code>不同于其他两个投票器,其他两个投票器都是对所有属性一次性整理得出结论,而<code>UnanimousBased</code>是对属性一个个进行抉择,所以在全部验证属性整理可能通过时,逐个判断就不一定了。由此我们可以得出以下结论:</p><ul><li>当所有属性在其他决策器没有反对票,但是有赞成票时,则授权通过</li><li>当其他决策器对某一属性出现反对票时,则授权失败</li><li>当全部弃票时,则视父类抽象<code>AbstractAccessDecisionManager</code>中的<code>allowIfAllAbstainDecisions</code>值来定,如果参数<code>allowIfAllAbstainDecisions</code>为true则授权通过,反之则授权失败,<code>allowIfEqualGrantedDeniedDecisions</code>默认为false</li></ul><h2 id="投票方式的实现-AccessDecisionVoter">投票方式的实现-AccessDecisionVoter</h2><p>决策器介绍完了,那投票器是如何投票的呢? 这种方式就是对所有的<code>AccessDecisionVoter</code>的实现的Voter,轮询进行决策,最终由<code>AccessDecisionManager</code>得出投票结果,判定是否有权限访问受保护的资源。我们先来看下<code>AccessDecisionVoter</code>接口都需要我们做什么</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionVoter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 同意 */</span><span class="token keyword">int</span> ACCESS_GRANTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/** 弃权 */</span><span class="token keyword">int</span> ACCESS_ABSTAIN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/** 驳回 */</span><span class="token keyword">int</span> ACCESS_DENIED <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">S</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他与决策器的方法比较相似</p><ul><li>vote()方法依然后有三个参数,authentication<code>的权限信息,是否符合</code>object<code>受保护对象要求的</code>configAttributes</li><li>support方法依然有两个,第一个则代表的是当前的<code>AccessDecisionVoter</code>是否支持并且能够处理对应的configAttributes,第二个则是受保护的对象类型是否支持</li></ul><p>不同的是 vote()方法,有了返回值,他的返回类型为int,而返回的数值则为上面已经备注了的<code>ACCESS_GRANTED</code>(同意),<code>ACCESS_ABSTAIN</code>(弃权)以及<code>ACCESS_DENIED</code>(驳回)。</p><p>SpringSecurity官方内置的投票器有两个,分别为<code>RoleVoter</code>与<code>AuthenticatedVoter</code></p><h3 id="RoleVoter角色投票器">RoleVoter角色投票器</h3><p>用法如其名,它会将传入的ConfigAttribute认为是一个角色的名称,它的支持标准在源码中如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> rolePrefix <span class="token operator">=</span> <span class="token string">"ROLE_"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token function">getRolePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果ConfigAttribute不为空,并且为指定前缀,则使用<code>RoleVoter</code>进行投票,源码中的默认前缀为<code>ROLE_</code>,开发过程中,你可通过自定义前缀</p><p>我们再看一下它的投票代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ACCESS_DENIED<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> ACCESS_ABSTAIN<span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> <span class="token function">extractAuthorities</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> ACCESS_DENIED<span class="token punctuation">;</span>            <span class="token comment">// Attempt to find a matching granted authority</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span> authority <span class="token operator">:</span> authorities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>authority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据源代码,我们可以得出如下结论:</p><ul><li>如果认证信息为空,则投反对票</li><li>如果权限所需要的角色在认证的角色中存在,则投赞成票</li><li>如果权限中的角色存在已指定前缀开头(如<code>ROLE_</code>),但是没有一个角色能匹配上所需角色,则投反对票</li><li>如果权限中的角色没有已指定前缀开头(如<code>ROLE</code>),则投弃权票</li></ul><h3 id="AuthenticatedVoter认证投票器">AuthenticatedVoter认证投票器</h3><p>它是对于认证来源来判定的投票器,源代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_AUTHENTICATED_FULLY <span class="token operator">=</span> <span class="token string">"IS_AUTHENTICATED_FULLY"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_AUTHENTICATED_REMEMBERED <span class="token operator">=</span> <span class="token string">"IS_AUTHENTICATED_REMEMBERED"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_AUTHENTICATED_ANONYMOUSLY <span class="token operator">=</span> <span class="token string">"IS_AUTHENTICATED_ANONYMOUSLY"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_FULLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                  <span class="token operator">||</span> IS_AUTHENTICATED_REMEMBERED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                  <span class="token operator">||</span> IS_AUTHENTICATED_ANONYMOUSLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,有且仅支持ConfigAttribute是<code>IS_AUTHENTICATED_FULLY</code>,<code>IS_AUTHENTICATED_REMEMBERED</code>,<code>IS_AUTHENTICATED_ANONYMOUSLY</code>这三种情况</p><ul><li>IS_AUTHENTICATED_FULLY: 完全的权限认证,这种方式往往是通过正常登录(用户名密码登录,Token等)来的</li><li>IS_AUTHENTICATED_REMEMBERED: 记住我的方式,这种方式是通过<strong>记住我</strong>功能实现的认证</li><li>IS_AUTHENTICATED_ANONYMOUSLY: 匿名方式,既未认证的用户。</li></ul><p>我们再来看一下它的vote投票方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> ACCESS_ABSTAIN<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> ACCESS_DENIED<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_FULLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFullyAuthenticated</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_REMEMBERED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isRememberMe</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token function">isFullyAuthenticated</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_ANONYMOUSLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isAnonymous</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token function">isFullyAuthenticated</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isRememberMe</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源代码解析,我们可以知道,投票器默认是弃权票,当所需属性是上述三种时,开始进行判断,顺便一提源码中对上述三种情况的判定方法分别是<code>isFullyAuthenticated(authentication)</code>,<code>isRememberMe(authentication)</code>,<code>isAnonymous(authentication)</code> 其中<code>isRememberMe(authentication)</code>与<code>isAnonymous(authentication)</code>调用的是<code>AuthenticationTrustResolver</code>中的方法,判定方式是通过判断<code>authentication</code>的类型是不是<code>RememberMeAuthenticationToken.class</code>或者<code>AnonymousAuthenticationToken.class</code>,而<code>isFullyAuthenticated(authentication)</code>则是判断<code>authentication</code>是不是<code>isAnonymous(authentication)</code> 跟<code>isRememberMe(authentication)</code>,如果两个均不是则是完全认证。根据源代码的流程,我们可以得出以下结论:</p><ul><li>当受保护资源不属于上述三证类型判断时,则投弃权票</li><li>当受保护资源为完全认证,认证权限类型是完全认证时则投赞成票,否则投反对票</li><li>当受保护资源为记住我时,认证权限是完全认证或者记住我时,则投赞成票,否则投反对票</li><li>当受保护资源为匿名认证时,则认证权限只要是三种类型的任意一种,则投赞成票,否则投反对票</li></ul><h3 id="小结">小结</h3><p>综上,我们知道了SpringSecurity默认的两种投票器,当然,如果这两种投票器无法满足的你需求,你完全可以自定义投票器加入到其中,根据自己的业务规则制定投票结果。</p><h2 id="AfterInvocationManager调用后置管理器">AfterInvocationManager调用后置管理器</h2><p>如果业务中需要对调用后的数据校验或统一操作,你可以去使用它,他提供了一个很方便的钩子方法,你可以根据实际需求去过滤修改返回的数据,通常用于数据权限。</p><p>后置管理器跟SpringSecurity其他解决方案的思想基本一致,由一个<code>AfterInvocationManager</code>作为顶层管理器设计类,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AfterInvocationManager</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">,</span><span class="token class-name">Object</span> returnedObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用后置管理器跟<code>AccessDecisionManager</code>访问决策管理器比较像,区别就在于访问决策器无返回值,它返回一个处理后的返回对象,相应的传入参数多了一个返回对象,SpringSecurity对于它的唯一实现是<code>AfterInvocationProviderManager</code>类,它管理者所有<code>AfterInvocationProvider</code>返回处理类,SpringSecurity对于<code>AfterInvocationProvider</code>的默认实现为<code>PostInvocationAdviceProvider</code>,具体实现的操作就是根据我们自己的配置,来执行,如果不能满足,我们可自行实现<code>AfterInvocationProvider</code>。</p><p>就此,我们把SpringSecurity的整个认证与鉴权的代码与原理梳理完了,本文主要讲解原理,具体实际应用,我会单独再写一篇博文,希望本文对大家有所帮助跟启发,谢谢大家!</p>]]></content>
      
      
      <categories>
          
          <category> 认证与授权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
            <tag> 认证与授权 </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境Docker的安装</title>
      <link href="/posts/24907.html"/>
      <url>/posts/24907.html</url>
      
        <content type="html"><![CDATA[<h1>Linux环境下Docker的安装</h1><p>本文介绍了离线与在线两种安装Docker的方式,本文未提及内容可参考官网:</p><blockquote><p>​<a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></blockquote><h2 id="Linux下载地址">Linux下载地址</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://mirrors.aliyun.com/centos/7/isos/x86_64/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>博主Linux版本为 <strong>CentOS-7-x86_64-DVD-2009</strong></p><h2 id="删除历史Docker">删除历史Docker</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在线环境">在线环境</h2><h3 id="安装依赖">安装依赖</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utils \    device-mapper-persistent-data \    lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置docker仓库">设置docker仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum-config-manager \      --add-repo \      https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置阿里云镜像仓库">设置阿里云镜像仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Docker">安装Docker</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="阿里云镜像加速器">阿里云镜像加速器</h3><ul><li>访问以下网址登录自己的阿里云账户,查看自己的镜像加速地址</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行以下命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxx.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="离线环境">离线环境</h2><p>离线安装参考官网</p><blockquote><p>​<a href="https://docs.docker.com/engine/install/binaries/">Install Docker Engine from binaries | Docker Documentation</a></p></blockquote><ol><li>下载官网安装包(建议使用CentoOS 7 17XX 以上版本)</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">https://download.docker.com/linux/static/stable/x86_64/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择自己合适的版本,博主下载版本为<strong>docker-18.09.9.tgz</strong></p><ol start="2"><li>上传至Linux服务器后在文件所在目录执行</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar xzvf docker-18.09.9.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>复制所有docker文件至/user/bin目录下,该目录为环境变量目录</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mv docker&#x2F;* &#x2F;usr&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>执行Docker安装命令</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dockerd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处如果没有异常显示如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">INFO<span class="token punctuation">[</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T06<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">26.836415513</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> <span class="token class-name">Docker</span> daemon                                 commit<span class="token operator">=</span><span class="token number">039</span>a7df9ba <span class="token function">graphdriver</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">=</span>overlay2 version<span class="token operator">=</span><span class="token number">18.09</span><span class="token number">.9</span>INFO<span class="token punctuation">[</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T06<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">26.837355719</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> <span class="token class-name">Daemon</span> has completed initialization          INFO<span class="token punctuation">[</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T06<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">26.858023345</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> API listen on <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接ctrl+c结束即可,此时Docker已经安装成功</p><ol start="5"><li><p>使Docker作为系统服务启动</p><ul><li>为确保服务顺利安装,请先关闭Linux中的selinux策略</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改selinux为disabled</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">SELINUX</span><span class="token punctuation">=</span><span class="token attr-value">disabled</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行重启命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建docker.service文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker.service文件添加以下内容</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[Unit]<span class="token attr-name">Description</span><span class="token punctuation">=</span><span class="token attr-value">Docker Application Container Engine</span><span class="token attr-name">Documentation</span><span class="token punctuation">=</span><span class="token attr-value">https://docs.docker.com</span><span class="token attr-name">After</span><span class="token punctuation">=</span><span class="token attr-value">network-online.target firewalld.service</span><span class="token attr-name">Wants</span><span class="token punctuation">=</span><span class="token attr-value">network-online.target</span>[Service]<span class="token attr-name">Type</span><span class="token punctuation">=</span><span class="token attr-value">notify</span><span class="token comment"># the default is not to use systemd for cgroups because the delegate issues still</span><span class="token comment"># exists and systemd currently does not support the cgroup feature set required</span><span class="token comment"># for containers run by docker</span><span class="token attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token attr-value">/usr/bin/dockerd</span><span class="token attr-name">ExecReload</span><span class="token punctuation">=</span><span class="token attr-value">/bin/kill -s HUP $MAINPID</span><span class="token comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><span class="token comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span><span class="token attr-name">LimitNOFILE</span><span class="token punctuation">=</span><span class="token attr-value">infinity</span><span class="token attr-name">LimitNPROC</span><span class="token punctuation">=</span><span class="token attr-value">infinity</span><span class="token attr-name">LimitCORE</span><span class="token punctuation">=</span><span class="token attr-value">infinity</span><span class="token comment"># Uncomment TasksMax if your systemd version supports it.</span><span class="token comment"># Only systemd 226 and above support this version.</span><span class="token comment">#TasksMax=infinity</span><span class="token attr-name">TimeoutStartSec</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><span class="token attr-name">Delegate</span><span class="token punctuation">=</span><span class="token attr-value">yes</span><span class="token comment"># kill only the docker process, not all processes in the cgroup</span><span class="token attr-name">KillMode</span><span class="token punctuation">=</span><span class="token attr-value">process</span><span class="token comment"># restart the docker process if it exits prematurely</span><span class="token attr-name">Restart</span><span class="token punctuation">=</span><span class="token attr-value">on-failure</span><span class="token attr-name">StartLimitBurst</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">StartLimitInterval</span><span class="token punctuation">=</span><span class="token attr-value">60s</span>[Install]<span class="token attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建docker.socket文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.socket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker.socket文件添加以下内容</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[Unit]<span class="token attr-name">Description</span><span class="token punctuation">=</span><span class="token attr-value">Docker Socket for the API</span><span class="token attr-name">PartOf</span><span class="token punctuation">=</span><span class="token attr-value">docker.service</span>[Socket]<span class="token comment"># If /var/run is not implemented as a symlink to /run, you may need to</span><span class="token comment"># specify ListenStream=/var/run/docker.sock instead.</span><span class="token attr-name">ListenStream</span><span class="token punctuation">=</span><span class="token attr-value">/run/docker.sock</span><span class="token attr-name">SocketMode</span><span class="token punctuation">=</span><span class="token attr-value">0660</span><span class="token attr-name">SocketUser</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">SocketGroup</span><span class="token punctuation">=</span><span class="token attr-value">docker</span>[Install]<span class="token attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token attr-value">sockets.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>赋予上述两个文件执行权限</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod +x &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.servicechmod +x &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>重新加载系统服务</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl daemon-reloadsystemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li>设置开机自启动</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>重启Linux</li></ol><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动Docker">启动Docker</h2><ul><li>执行docker启动命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试Docker是否安装成功</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的探索</title>
      <link href="/posts/56241.html"/>
      <url>/posts/56241.html</url>
      
        <content type="html"><![CDATA[<h1>并发编程的探索</h1><h2 id="简介">简介</h2><p>顾名思义,并发就是指当前的系统,能够同时承载的访问数量。通常会细定义为TPS与QPS</p><ul><li>TPS(Transaction Processing Systems): 每秒事务处理数量</li><li>QPS(Query Processing Systems) : 每秒查询处理数量</li></ul><p>当然,互联网上对于TPS与QPS还有更细化的解释:</p><blockquote><p>Tps即每秒处理事务数，包括了<br>1、用户请求服务器<br>2、服务器自己的内部查询等处理<br>3、服务器返回给用户<br>这三个过程，每秒能够完成N个这三个过程，Tps也就是N；</p><p>QPS基本类似于TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入QPS之中。每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准<br>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。<br>如果是对一个接口（单场景）压测，且这个接口内部不会再去请求其它接口，那么TPS等于QPS，否则，TPS不等于QPS</p></blockquote><h2 id="需求">需求</h2><h3 id="硬件需求">硬件需求</h3><p>一个系统能支持多少的并发量,除了本身软件的架构设计以及代码外,最重要的还是硬件的支撑,而硬件就是我们所熟知的现今计算机基本组成,即硬盘、内存、CPU、网卡以及通讯提供商给予的宽带种类、速率。当硬件达到瓶颈时我们也可以横向扩展,就是我们所说的集群。</p><h3 id="软件需求">软件需求</h3><p>软件需求依托于硬件,再多的优化也只能在当前硬件的极限环境内波动,不可能超过硬件的承受范围,这个承受范围的衡量标准,就是<strong>RT(Response Time)</strong> 响应时间。软件方面的优化思路,就是要充分利用好硬件,<strong>多线程</strong>的异步执行,就是充分利用硬件提高并发方式的其中之一。</p><h2 id="线程与进程">线程与进程</h2><p>一个<strong>进程</strong>可以创建多个线程,而<strong>线程</strong>是操作系统进行运算和调度的最小单元,多个线程可以并行执行,而并行执行的数量,原来线程的数量由CPU的核心数决定,但是Intel的超线程技术出来后,这个概念就不再固定,变成了跟CPU线程数决定,也就是我们通常买CPU时所听说的8核16线程。</p><h2 id="并发与并行">并发与并行</h2><ul><li><strong>并行</strong> 并行由CPU的核心数或者线程数决定,意味着可以同时执行的任务数量</li><li><strong>并发</strong> 并发则是只同一时间段内在多个线程内同时执行的数量。由于并行数量的限制,CPU则会通过<strong>时间片切换</strong>的方式来同时执行这些超过本身并行数量的任务。</li></ul><h2 id="时间片轮转调度">时间片轮转调度</h2><p>时间片轮转调度,就是我们经常说的时间片切换,引用百度百科含义就是</p><blockquote><p>​时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。</p><p>时间片轮转调度中唯一有趣的一点是时间片的长度。从一个进程切换到另一个进程是需要一定时间的–保存和装入寄存器值及内存映像，更新各种表格和队列等。</p></blockquote><p>时间片在没有干预的情况下,每段时间片执行时长都是固定的,进程的切换需要耗费较大的资源,而线程的切换只需保存少量寄存器的内容,但是即使这样,时间片的切换依旧需要耗费少量时间,这是不可避免地。</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211031214638502.png" alt="时间片切换" title="时间片切换"></p><h2 id="创建线程">创建线程</h2><p>博主是一名默默无闻的Java程序员,故以Java代码举例创建线程的其中三种方式</p><h3 id="继承Thread类">继承Thread类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程启动了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadMethod1</span> threadMethod1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadMethod1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,run方法为具体执行的逻辑,而start则为启动线程</p><h3 id="实现Runnable接口">实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程-实现Runnable接口方式运行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,实现Runnable接口的方式仍然需要Thread类中的start方法去启动并且这两类创建方式均没有返回值,场景用于无需关心执行结果的场景。</p><h3 id="实现Callable接口">实现Callable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"当前线程执行成功,这个是返回结果"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadMethod3</span> threadMethod3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>threadMethod3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Callable接口提供了一个带返回值的call方法,返回类型由实现Callable的泛型决定,并用FutureTask类来获取未来任务的结果。</p><h2 id="线程的生命周期">线程的生命周期</h2><p>本文已Java语言距离,在Java中,线程一共有6种状态</p><ul><li>New新生</li><li>Runnable       运行</li><li>Blocked          阻塞</li><li>Waiting           等待</li><li>TimedWaiting  超时等待</li><li>Terminated     结束</li></ul><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/concurent.png" alt="线程的生命周期示意图" title="线程的生命周期示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 时间片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/posts/20533.html"/>
      <url>/posts/20533.html</url>
      
        <content type="html"><![CDATA[<h1>代码优雅之路-设计模式之工厂模式</h1><h2 id="概述">概述</h2><p>现实中的工厂,就是造东西的,那我们生活中有哪些类型的工厂呢? 总结一下,可以分为三种:</p><ol><li>自给自足的小作坊-这种工厂产能不大,但是对于重复工作有一套自己的方案</li><li>流水线性的大工厂-已经有了一套相对完善的机器流水线,固定的模式产能效率都有很大提升</li><li>完善的产业链代工厂-这时候已经可以不用关心这个东西怎么出来的,只掌握核心即可</li></ol><p>在代码中,同样也存在现实社会中的上述三种情况,依次对应着我们熟知的简单工厂模式(小作坊),工厂方法模式(大工厂),抽象工厂模式(代工厂)。</p><h2 id="简单工厂模式">简单工厂模式</h2><p>小作坊中,往往制造某一种类商品,比如某章丘铁锅制造坊,某棉花制造坊等等,<strong>简单工厂模式(Simple Factory Pattern)</strong> 就是这样一种模式,由一特定的工厂对象,创造出指定的产品并实例化.使用起来往往只需传入要制造哪类产品(参数)即可。</p><p>现在我们用代码来清晰直观的了解下,现已中华传统美食水饺为例:</p><ol><li>由于水饺有各种各样的内陷,我们做一个顶层接口作为标准</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 各种水饺都有制作过程     */</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>现在,我们准备做韭菜鸡蛋馅的水饺,并且已经录入好了制作方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiveEggDumpling</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作韭菜鸡蛋水饺的过程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>现在我们开始制作韭菜水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> dumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作</span>    dumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来细看上面的三道工序,父类的水饺大类(IDumplings)指向了子类的韭菜馅水饺(ChiveEggDumpling),如果我们需要分别制作各类水饺,就会形成如下代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> chiveEggDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-韭菜馅水饺</span>    chiveEggDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好白菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> cabbageDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-白菜馅水饺</span>    cabbageDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好芹菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> celeryDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-芹菜馅水饺</span>    celeryDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的实际项目中,对象的创建过程远远要比上述代码更为复杂,即使是上述代码,我们依然会觉得臃肿,更何况在实际运用过程中,随着水饺种类越来越多,大量的类似代码迎面扑来,会不会感到窒息呢? 这是时候我们就需要用<strong>简单工厂模式</strong>对代码进行优化,总体思路就是:<strong>细节隐藏,减少依赖</strong>。</p><ol><li>首先-建造水饺制作小作坊</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据你想要的吃的 获取哪种水饺     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IDumplings</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> dumplingName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>dumplingName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"cabbage"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"chiveEgg"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"celery"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>再一次制作我们要的水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//制作韭菜馅水饺</span>    <span class="token class-name">IDumplings</span> chiveEgg <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"chiveEgg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chiveEgg<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作白菜馅水饺</span>    <span class="token class-name">IDumplings</span> cabbage <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"cabbage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cabbage<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作芹菜馅水饺</span>    <span class="token class-name">IDumplings</span> celery <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"celery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    celery<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家有没有发现,最明显的区别在哪,就在于我们不需要知道哪个类制造的,我们只需要知道我们要制作哪种水饺即可。当然,小作坊毕竟是小作坊,水饺种类少了,它足以应对,但是一旦要生产几十种上百种水饺,工厂(工厂类)就要炸锅了,而且,代码本身也不符合开闭原则(开闭原则后续会单独介绍),为了解决<strong>简单工厂模式</strong>的<strong>弊端</strong>,这时候,<strong>工厂方法模式</strong>就来了。</p><h2 id="工厂方法模式">工厂方法模式</h2><p>小作坊已经无法应对我们越来越多的产品种类,这时候工厂升级了!我们需要对流水线作业进行分门别类了,一条流水线就做一类水饺,**工厂方法模式(Factory Method Pattern)**应运而生。</p><p>直接上代码:</p><ol><li>建立我们的大工厂</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 启动水饺流水线     *     * @return 指定水饺的流水线     */</span>    <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建立各种水饺流水线-举个白菜例子,其他类似</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CabbageDumplingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动我们的流水线,制作水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageDumplingFactory</span> cabbageDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启芹菜水饺流水线</span>    <span class="token class-name">CeleryDumplingFactory</span> celeryDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作白菜水饺</span>    cabbageDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作芹菜水饺</span>    celeryDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,我们在上新品类的时候,只需要新增流水线即可,而无需过多关注产品创建的细节,符合开闭原则,但是<strong>工厂方法模式</strong>也存在<strong>弊端</strong>,会导致流水线(类)越来越多。</p><h2 id="抽象工厂模式">抽象工厂模式</h2><p>我们在生产的过程当中,流程都是一样的,比如水饺的生产流程就是1.做皮,2.调馅,3.制作打包。但是这个过程中,做皮是一样的,后续的流程也是不让你随意变动的,<strong>抽象工厂模式</strong>就为解决此类问题而来,话不多说,上代码。</p><ol><li>约定好后续具体步骤</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IStuffing&lt;/p> * 调馅的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:42 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStuffing</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 调配     */</span>    <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IPackage&lt;/p> * 制作打包的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:45 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackage</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 水饺包装盒     */</span>    <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>提供我们的核心技术,以此为基础开始制作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">KernelDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这里用了上等秘方老面,统一制作     * */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作出来水饺皮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 调馅 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IStuffing</span> <span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 打包 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IPackage</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对每个步骤的方法实现具体操作-以芹菜举例</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryStuffing</span> <span class="token keyword">implements</span> <span class="token class-name">IStuffing</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作芹菜馅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryBox</span> <span class="token keyword">implements</span> <span class="token class-name">IPackage</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"芹菜水饺打包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>开始流水线操作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageFactory</span> cabbageFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//做皮</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调馅</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打包</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此,一条完整的流水线就制作成功了,整个制作流程<strong>抽象工厂模式</strong>清晰的描述出来,但是依旧存在缺点,如果我想在流水线中加入一个环节,比如,把水饺做成形状加入进去,全部流水线也都需要调整,完全不符合开闭原则。</p><h2 id="结言">结言</h2><p>至此,三种工厂模式介绍完了,都有各自的优缺点,实际运用中依据自己项目实际情况选择应用,有时候开闭原则不用太过在意遵循,迭代周期一年两年有何不可。文章中提到的源码。可访问我的 <a href="https://github.com/timeroar/timeroar-blog-code.git">github仓库</a> 进行参考。不足之处,也请留言指出</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代码优雅之路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
