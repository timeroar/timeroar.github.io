<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并发编程的艺术-Lock锁原理与分析</title>
      <link href="/posts/23173.html"/>
      <url>/posts/23173.html</url>
      
        <content type="html"><![CDATA[<h1>并发编程的艺术-Lock锁原理与分析</h1><h2 id="简介">简介</h2><p>Java中的<code>java.util.concurrent</code>(J.U.C)包中提供了很多并发编程相关的辅助工具，比如阻塞队列、线程池、锁、并发集合等，其中为了保证线程的安全性,给出的解决方案就是Lock顶层接口,比较经典的实现就是<code>ReentrantLock</code>以及后来的<code>StampedLock</code> 它是Reentrant读写锁的升级版。注: 本博文存在CAS等知识点,建议大家先阅读博主的另一篇<code>synchronized</code>的博文</p><h2 id="使用">使用</h2><p><code>ReentrantLock</code>是一把互斥锁,排它锁,但同时,他又是一个可重入锁,功能类似于<code>synchronized</code>,互斥排它指同一时间呢有且只允许一个线程获取锁资源,而可重入的意思就是,如果当这个线程再次尝试获取锁资源时,无需再进行加锁操作,只需计入重入次数即可。示例如下:</p><ul><li>首先我们创建一个需要加锁的方法以及操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建两个线程去执行,判断最后结果是否不存在并发</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LockDemo</span> lockDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lockDemo<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    threads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threads<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LockDemo</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后我们发现,最终结果无论执行多少次,结果均为20000,与我们预期一样,故加锁成功。</li></ul><h2 id="锁的设计理念与ReentrantLock源码分析">锁的设计理念与ReentrantLock源码分析</h2><h3 id="原理分析">原理分析</h3><p>根据Lock的特性,我们可以进行总结下:</p><ul><li>如果要满足排他,互斥特性,势必需要一个共享变量。</li><li>没有竞争到锁的线程,势必阻塞</li><li>被阻塞的线程,势必需要一个容器或者队列来管理</li></ul><p>根据特性的总结,去看源码,发现,<code>ReentrantLock</code>中依赖了<code>AbstractQueuedSynchronizer</code>来实现线程的同步</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211226142655709.png" alt="ReentrantLock关系图"></p><p>根据图例与源码,发现在<code>ReentrantLock</code>中定义了一个Sync的同步类,这个类有两个实现,一个FireSync(公平同步),一个是NonfairSync(非公平同步),也就是公平锁与非公平锁,它在我们new ReentrantLock对象的时候来决定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中可以发现,当构造时默认为非公平锁,如果自行传入boolean,则会根据boolean的结果决定,true为公平锁,false则为非公平。</p><p>sync则继承了<code>AbstractQueuedSynchronizer</code>抽象类,说明它的具体逻辑是在<code>AbstractQueuedSynchronizer</code>也就是AQS中实现的。</p><h3 id="AbstractQueuedSynchronizer">AbstractQueuedSynchronizer</h3><p><code>AbstractQueuedSynchronizer</code>（AQS）是ReentrantLock实现锁同步的核心类，但是实际上在J.U.C中大部分组件都依赖于<code>AbstractQueuedSynchronizer</code>。</p><p>AQS中提供了如下两种锁的实现。</p><ul><li>共享锁</li><li>独占锁</li></ul><p>独占锁,表示<strong>同一时刻只允许一个线程获取锁</strong>,共享锁,<strong>同一时刻允许多个线程同时获得锁</strong>. 这就有疑问了,同一时刻允许多个线程获得锁,跟不加锁有什么区别,现在将ReentrantLock与AQS结合起来分析</p><p>我们先预览下加锁解锁的流程</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/lock.png" alt="锁抢占流程"></p><p>大致流程如下:</p><ol><li>线程去尝试访问Lock锁加锁的共享资源</li><li>如果线程获取到锁,则将互斥变量<code>state</code>修改为1,并将exclusiveOwnerThread赋值为当前线程</li><li>如果线程为获取到锁,将加入阻塞队列当中</li></ol><p>AQS是一个抽象类,留给子类需要重写的方法有下面4个,如果以后想拓展,可以实现这四个方法来生成自己的锁,例如,分布式锁。</p><ul><li>tryAcquire()：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li><li>tryRelease()：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li><li>tryAcquireShared()：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余可用资源。</li><li>tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点则返回true，否则返回false。</li></ul><p>state是一个互斥变量,当state=0时,表示当前共享资源处于空闲状态,当大于0时,表示有线程已经抢占到锁还没释放,但是在重入情况下,它可能是一个大于1的值,也就是线程的重入次数,相应的重入多少次,最后释放锁的时候就要释放同样的次数。state是一个volatile修饰的变量,并通过CAS的方式修改,保证在多线程竞争的情况下,变量的原子性。</p><p>综上所述,<code>ReentrantLock</code>在加锁时,实际上是调用的<code>tryAcquire()</code>方法通过CAS的方式将state从0修改为1,其他线程在调用<code>tryAcquire()</code>方法则会失败,但是当以获得锁的线程是个类似递归操作,再次通过<code>tryAcquire()</code>获取锁资源时,则会将state进行++操作,这就是重入操作。</p><p>流程操作中的唤醒,由LockSupport.park与LockSupport.unpark来实现。</p><h3 id="Lock">Lock</h3><p>我们在原理分析中,了解了公平锁与非公平锁,并且知道了创建的过程,现在我们具体看看公平锁与非公平锁的加锁过程。</p><p>FairSync(公平锁), lock()加锁具体实现如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会发现直接进行了<code>acquire()</code>方法,<code>acquire()</code>方法则是具体的锁竞争逻辑,后续会分析</p><p>NofairSync(非公平锁), lock()加锁具体实现如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非公平锁则是直接去尝试通过CAS的方式去修改state的值,如果这时候恰好state为0,则不用执行锁竞争逻辑,直接获得锁。如果CAS失败,则执行锁竞争逻辑。</p><p>现在我们去分析下锁竞争具体方法<code>acquire()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一共做了两件事</p><p>第一件事,通过<code>tryAcquire()</code>方法尝试获取锁,如果成功返回true,否则为false,它是抽象父类<code>AbstractQueuedSynchronizer</code>提供的方法,虽然不是抽象方法,但是它会直接抛出<code>UnsupportedOperationException</code>异常,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以具体逻辑还是需要子类去实现。在Reentrantlock中,公平锁的尝试独占方式如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体操作流程为:</p><ul><li>获取state得的当前锁的状态,如果当前状态为0,则尝试通过CAS的方式修改state状态,成功则抢占成功获得锁,否则返回false抢占失败</li><li>如果当前state锁的状态不为0,则判断当前线程是否为同一线程,如果是则增加重入次数,返回true,否则返回false抢占失败</li></ul><p>第二件事,如果锁抢占失败,则调用<code>acquireQueued()</code>方法将线程加入阻塞队列,进入阻塞队列的线程需要包装为Node节点,这个过程则通过<code>addWaiter(Node.EXCLUSIVE)</code>来完成,<code>addWaiter</code>的源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先将当前线程封装为Node,获取当前队列中最末尾节点,也就是处于tail位置的Node</li><li>如果末尾存在节点Node,则通过CAS的方式将当前线程的prev指向指向tail,作为末尾节点引入,并将原末尾节点的next指向当前node</li><li>这期间如果存在线程竞争,或者队列中没有Node,则调用<code>enq()</code>方法处理,方法源码如下:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法采用自旋锁的操作来完成,如果末尾节点为空,则不断尝试变更Node为头节点,否则不断尝试变更Node为末尾节点。</p><p>在Node返回后,通过<code>acquireQueued()</code>方法获取锁,源码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先,获取当前Node的prev节点,如果prev指向的是head,则说明当前线程有权利去获取锁</li><li>如果当前Node有权利,并且之前线程已经释放锁,且当前线程成功获取锁,则将当前Node设置到head当中,并将原head节点的next指向设计为空,根据GC回收机制,如果当前对象无任何引用则会被自动回收,也就说,原head节点会从链表中清除并被GC回收</li><li>如果当前Node有权利,但当前线程获取锁失败,则去通过shouldParkAfterFailedAcquire()方法判断原节点与现节点状态是否正常,具体源码如下:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取原节点为<code>waitStatus</code>状态,Node的等待状态一共由5种状态,分别为:</p><ul><li>default: 0  默认状态</li><li>CANCELLED :  1 表示线程已取消, 通常是线程等待超时,或者被强制中断,此状态下的Node waitStatus不会在发生改变</li><li>SIGNAL: -1  此状态下的Node需要等待以获得锁的线程解除所占用</li><li>CONDITION: -2  此Node有条件的等待,常常线程被await()等待</li><li>PROPAGATE: -3  共享模式下,Node可以运行操作</li></ul><p>这里的源码中,如果waitStatus等于SIGNAL状态则返回true ,如果不是,则尝试把非正常状态节点移除,也就说CANCELLED状态,如果为其他状态,则尝试修改waitStatus为SIGNAL状态。</p><p>这里如果<code>shouldParkAfterFailedAcquire()</code>方法返回true,则执行<code>parkAndCheckInterrupt()</code>,此方法通过<code>LockSupport.park()</code>方法挂起当前线程,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此,整个加锁流程结束。</p><h3 id="unlock">unlock</h3><p>当线程需要释放锁的时候,需要调用<code>unlock()</code>方法进行解锁,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在跟进看一下<code>release()</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>release方法具体做了两件事,第一个就是调用<code>tryRelease()</code>方法尝试去释放锁,第二个就是在释放锁成功后调用<code>unparkSuccessor()</code>方法去唤醒阻塞队列中的线程。</p><p>我们先看一下<code>tryRelease()</code>方法,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先,他调用该<code>getState()</code>方法获取当前线程重入次数,然后根据重入次数减1。如果减1后等于0,则表示当前线程已经全部执行完毕,释放锁,否则返回false。</p><p>如果释放锁成功,则第二步调用<code>unparkSuccessor()</code>方法尝试唤醒阻塞队列的线程,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取头节点的waitStatus状态, 如果小于0,即通过CAS的方式尝试将waitstatus状态修改为0,即默认状态,然后获取当前头节点的下一个节点,如果下个节点为空,或者下个节点的waitStatus为待消亡状态,则从线程尾部开始遍历,在离头节点最近的一个Node的waitStatus状态小于0的的节点。</p><p>最后 如果获取的节点s不为空,则尝试唤醒该线程。</p><p>至于为什么线程不从头部开始扫描,而是从尾部开始扫描,是因为在添加阻塞队列的过程中调用<code>enq()</code>的方法有关,它的逻辑是将新节点的prev指向之前tail的节点,然后通过CAS操作将新节点设置为tail节点,最后将原tail节点的node的next指向新节点,如果原tail节点还未将node的next指向新节点,势必在扫描到这里是出现问题,所以通过尾节点就不会出现这类问题。</p><p>至此,ReentrantLock加锁与解锁流程就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lock </tag>
            
            <tag> 阻塞队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之原型模式</title>
      <link href="/posts/8028.html"/>
      <url>/posts/8028.html</url>
      
        <content type="html"><![CDATA[<h1>代码优雅之路-设计模式之原型模式</h1><h2 id="概述">概述</h2><p>在日常开发过程当中,我们难免会遇到类与类之间转换的过程,可能这两个类字段类型,名称只存在微小区别,甚至一模一样,比如DTO到Entity过程,这个时候就需要本文的重点模式-<strong>原型模式</strong></p><h3 id="概念">概念</h3><p>原型模式(Prototype Pattern) 官方原文为:</p><blockquote><p>Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.</p></blockquote><p>意思大概是当我们使用原型实例要指定创建对象种类的时候，通过复制该原型创建新对象。</p><h3 id="核心">核心</h3><p>原型模式的核心是需要拷贝原型对象,且不能通过new对象的形式getter,setter来进行拷贝,需将原型对象通过内存二进制流的形式进行拷贝,二进制流的形式无需经历new对象的构造过程,性能会些许提升。</p><h2 id="应用场景">应用场景</h2><p>原型模式适用(包含但不限于)以下场景</p><ol><li>体力劳动过剩</li><li>类初始化消耗资源过多</li><li>构造方法过于复杂</li></ol><p>看到这,可能会问,体力劳动过剩是什么鬼? 大家看一篇代码示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">OldDomain</span> old <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OldDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略set过程            <span class="token class-name">NewDomain</span> newDomain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setIdCard</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">getIdCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>疯不疯? 况且真实项目情况时,可能会有几十个,甚至嵌套了N个模型类吧,一个一个去getter,setter,即使你体力劳动过剩也不能这么玩吧。但是这种方式不能完全否定,为什么呢,文末说明。</p><h2 id="使用">使用</h2><p>JDK为我们提供了一个原型接口Cloneable:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>让我们的原型对象去实现它并重写<code>clone()</code>方法;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewDomain</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 名字 */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/** 年龄 */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>    <span class="token comment">/** 地址 */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token comment">/** 电话 */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token comment">/** 身份证 */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> idCard<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">NewDomain</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">NewDomain</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建原型对象并进行克隆操作:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NewDomain</span> newDomain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setIdCard</span><span class="token punctuation">(</span><span class="token string">"112233"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"1100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NewDomain</span> cloneNewDomain <span class="token operator">=</span> newDomain<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个对象---------"</span> <span class="token operator">+</span> newDomain<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆对象----------"</span> <span class="token operator">+</span> cloneNewDomain<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以得到如下输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">第一个对象---------法外狂徒张三克隆对象----------法外狂徒张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此,我们发现已经克隆成功,但是这种形式只是浅克隆形式,也就是内存地址引用,原型发生变化,克隆对象也会跟着变化,如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NewDomain</span> newDomain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"法外狂徒张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">setCars</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"自行车"</span><span class="token punctuation">,</span><span class="token string">"三轮车"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NewDomain</span> cloneNewDomain <span class="token operator">=</span> newDomain<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个对象---------"</span> <span class="token operator">+</span> newDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆对象----------"</span> <span class="token operator">+</span> cloneNewDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>    newDomain<span class="token punctuation">.</span><span class="token function">getCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"电动车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个对象赋值后---------"</span> <span class="token operator">+</span> newDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆对象----------"</span> <span class="token operator">+</span> cloneNewDomain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">第一个对象<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>自行车<span class="token punctuation">,</span> 三轮车<span class="token punctuation">]</span>克隆对象<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">[</span>自行车<span class="token punctuation">,</span> 三轮车<span class="token punctuation">]</span>第一个对象赋值后<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>自行车<span class="token punctuation">,</span> 三轮车<span class="token punctuation">,</span> 电动车<span class="token punctuation">]</span>克隆对象<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">[</span>自行车<span class="token punctuation">,</span> 三轮车<span class="token punctuation">,</span> 电动车<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现,第一个对象发生改变后,被克隆对象也发生了改变,如果你的新对象不想受原型对象影响,就需要采用<strong>深克隆形式</strong>,深克隆形式有两种一种是JSON序列化,另一种则是流读取输出的形式,现在已二进制流读取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">NewDomain</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">NewDomain</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面的<code>newDomain.clone();</code>变更为<code>newDomain.deepClone();</code> 执行结果如下:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">第一个对象---------[自行车, 三轮车]克隆对象----------[自行车, 三轮车]第一个对象赋值后---------[自行车, 三轮车, 电动车]克隆对象----------[自行车, 三轮车]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现克隆对象不再受原型对象的改变而改变。</p><h2 id="结言">结言</h2><p>原型模式的优点就是性能还不错,毕竟是基于二进制流,比直接new对象性能上要提升许多,缺点也很明显,如果想实现深克隆,势必要每个类都需书写深克隆方法,在对象嵌套过程当中,实现过程势必繁琐。但是我们在工作当中,深克隆的方式避免不了,而且我们在工作中往往不去在每个对象当中去书写深克隆方法,为了方便,我们可能通过反射来获取,但这些深克隆方式势必会影响性能,相比之下,getter,setter的效率反而比较高。所以原型模式为我们提供了一种理念,我们可以根据实际需求去运用。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 代码优雅之路 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的艺术-线程可见性volatile</title>
      <link href="/posts/29367.html"/>
      <url>/posts/29367.html</url>
      
        <content type="html"><![CDATA[<h1>并发编程的艺术-线程可见性volatile</h1><h2 id="简介">简介</h2><p>在多线程环境下,两个线程对同一变量进行操作时,互相是不可见状态,不可见状态就会导致一个线程修改了这个共享变量,而另一个线程不知道你去修改了,就可能导致变量最终预期与实际不一致的情况。为了确保共享变量能够保证一致性,<code>volatile</code>为此而来,</p><h2 id="示例">示例</h2><p>在简介当中,我们知道了<code>volatile</code>是为了解决不可见性而来,在实际应用中,会带来什么问题呢? 举个简单的示例如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> TYPE <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>TYPE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程已启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TYPE <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中只创建了个简单的线程,当<code>TYPE</code>为true时,子线程会一直执行++操作,主线程改变TYPE为false,我们预期这个main方法执行后,应该为自动停止。但是实际结果中你会发现,这个代码会一直执行,永远循环下去。导致这个问题的原因就是线程<code>thread</code>并没有发现<code>TYPE</code>已经被主线程改变。那么如何解决问题呢?</p><ul><li>方案一  增加本文重点<code>volatile</code></li><li>方案二  活性失败,比如在while循环中加入io操作,例如 <code>System.out.print</code></li><li>方案三  增加JVM启动参数  <code>-Djava.compiler = NONE</code></li></ul><p>方案是有了,那怎么产生的呢?它们又是怎么解决的呢?</p><h2 id="原因">原因</h2><h3 id="编译器重排序">编译器重排序</h3><p>说到原因,不得不说HosSpot虚拟机的两个即时编译器</p><ul><li>Client Compiler</li><li>Server Compiler</li></ul><p>程序具体使用哪种编译器由JVM虚拟机来决定。</p><p>其中,上述代码的问题点就出现与ServerCompiler编译器,它是一个面向服务端并且充分优化的高级编译器,包含不限于:</p><ul><li>无用代码消除（Dead Code Elimination）</li><li>循环表达式外提（Loop Expression Hoisting）</li><li>循环展开（Loop Unrolling）</li></ul><p>其中,<strong>循环表达式外提</strong>就是导致示例代码出现问题的根本原因,经过它编译后的代码变为了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TYPE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可以发现,经过它优化后,TYPE进入时为true,后续根本不会变化,所以其他线程对TYPE变更时,示例线程根本不会知道,所以我们可以采用<strong>方案三进行编译优化禁用</strong>,但是为了这一个小细节去影响整个全局的优化,代价是否有点大呢?</p><h3 id="CPU高速缓存">CPU高速缓存</h3><p>除编译器优化外,CPU的高速缓存机制也会导致可见性问题,但是在CPU层面又有总线锁,缓存锁的机制去解决这类问题,总线锁和缓存锁通过<code>Lock</code>信号触发，如果当前CPU支持缓存锁，则不会在总线上声明<code>Lock</code>信号，而是基于缓存一致性协议来保证缓存的一致性。如果CPU不支持缓存锁，则会在总线上声明<code>Lock</code>信号锁定总线，从而保证同一时刻只允许一个CPU对共享内存的读写操作。<code>volatile</code>就是通过此方式来解决可见性问题。</p><h3 id="CPU指令重排序">CPU指令重排序</h3><p>指令重排序,通俗来讲就是CPU在保证单线程情况下,重排序之后的运行结果与程序本身预期结果一致的前提下,进行重排序的一种机制。例如下面这篇示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码我们可以知道,代码会从上到下依次执行, 但是i与y的执行顺序对于最终t的结果毫无影响,这时候就有可能发生指令重排序变为:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">+</span> y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Volatile">Volatile</h2><p>我们在TYPE加入volatile关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Boolean</span> TYPE <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们通过汇编指令启动main方法,会得到下面的结果:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">0x00000207c9066087: lock add dword ptr [rsp],0h  ;*putstatic TYPE                                                ; - com.timeroar.blog.concurrent.voliat.VloliateThreadTest::&lt;clinit&gt;@4 (line 10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大家发现没，主线程去修改<code>TYPE</code>变量的值时，在修改命令前面会增加一个<code>Lock</code>信号，原因是<code>volatile</code>关键字会在JVM层面声明一个C++的<code>volatile</code>，得到这个声明后JVM会调用<code>storeload()</code>内存屏障方法,此方法会执行<code>lock</code>指令,将<code>volatile</code>声明的变量在CPU层面从Store Buffers中刷新到缓存行,这样当其他线程再去读取``volatile`声明的变量的值时，会从内存中或者其他缓存了此变量的缓存行中重新<br>加载，使得线程能够获得此变量最新的值。</p><h3 id="Volatile的重排序规则">Volatile的重排序规则</h3><p>volatile并不会在所有情况都限制重排序规则,我们用一张表来解释Volatile什么时候允许重排序,什么时候不允许</p><table><thead><tr><th>第一个操作\第二个操作</th><th>普通读</th><th>普通写</th><th>Volatile读</th><th>Volatile写</th></tr></thead><tbody><tr><td>普通读</td><td></td><td></td><td></td><td>X</td></tr><tr><td>普通写</td><td></td><td></td><td></td><td>X</td></tr><tr><td>Volatile读</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><td>Volatile写</td><td></td><td></td><td>X</td><td>X</td></tr></tbody></table><p>由图中展示,其实我们只需要记住三点即可:</p><ul><li>当第一个操作是<code>volatile</code>写时，且第二个操作是<code>volatile</code>读或写时，这两个操作不允许重排序。</li><li>当第二个操作是<code>volatile</code>写时，不管第一个操作的读/写是普通变量还是<code>volatile</code>修饰的变量，都不允许这两个操作重排序。</li><li>当第一个操作是<code>volatile</code>读时，不管第二个操作的读/写是普通变量还是<code>volatile</code>修饰的变量，都不允许这两个操作重排序。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可见性 </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构师之路-领域驱动设计DDD</title>
      <link href="/posts/35796.html"/>
      <url>/posts/35796.html</url>
      
        <content type="html"><![CDATA[<h1>架构师之路-领域驱动设计DDD</h1><h2 id="引文">引文</h2><blockquote><p>领域驱动设计(Domain-Driven-Design),简称 DDD,它是一种基于专业<strong>领域知识</strong>,去解决<strong>复杂的业务</strong>问题的软件开发<strong>方法论</strong>。</p></blockquote><p>领域驱动的设计理念是以<strong>客户与产品为导向</strong>,进行<strong>业务拆分</strong>的一套架构设计思路,其实DDD的概念并不是最近才出现的,它早在2003年的时候就被提出了,但是一直没有得到太多的关注,直到最近几年,DDD的概念才深入人心,因为它随着微服务的出现而变得尤为重要,为什么呢? 因为微服务更偏重于技术架构,要求技术架构能适应市场以及业务的快速变化,但我们在运用微服务的实际情况是,给微服务带来变化的不是外在的市场,基本都是<strong>前期沟通不充分</strong>导致的。</p><h3 id="原则">原则</h3><p>领域驱动的核心原则主要由以下两点</p><ol><li>项目的重点一定是领域本身,而不是技术细节</li><li>复杂的领域设计应基于模型</li></ol><h2 id="极限编程">极限编程</h2><blockquote><p>极限编程（Extreme Programming）我们称之为Xp编程,它是一门针对业务和软件开发的规则，它的作用在于将两者的力量集中在共同的、可以达到的目标上。它是以符合客户需要的软件为目标而产生的一种方法论，XP使开发者能够更有效的响应客户的需求变化，哪怕是在软件生命周期的后期。</p></blockquote><p>DDD领域驱动设计是<strong>XP编程</strong>的一种,我们常见的Xp编程还有TD,TDD,BDD,ATDD,本博文就简单介绍下TD与TDD,了解下极限编程的概念</p><h3 id="传统模式开发-TD">传统模式开发(TD)</h3><p>传统开发模式(Traditional Development) 简称 TD:  传统开发模式,就是开发人员拿到业务需求后,进行设计,设计完成后开始书写代码,最后写测试用例进行测试。这种模式的优点是开发迅速,交付快,缺点也很明显,中途出问题(例如业务逻辑有问题等)可能白写。</p><h3 id="测试驱动开发-TDD">测试驱动开发(TDD)</h3><p>测试驱动开发(Test-Driven Development) 简称 TDD: 它的特点就是自动测试先行。它的过程就是由研发人员在拿到需求以后,先根据需求去写测试用例,然后编写测试代码通过测试,最后在不改变测试用例整体行为时重构为正是代码。与传统方式不同点在于,他不去进行设计,靠一边写测试用例,一边进行构造设计。</p><p>优点:</p><ul><li>关注业务,不关注实现,代码清晰,流程清晰</li><li>编写测试用例能够体现发现业务需求带来的问题</li><li>交付时bug相比之下会少很多</li></ul><p>缺点:</p><ul><li>二次重写,近乎相当于写两次代码</li><li>维护困难,业务需求变更等于再写两遍(测试跟正式)</li><li>全局设计匮乏,一边写一边设计,可能只在乎当前步骤的功能点,而忽视了全局。</li></ul><h2 id="通用语言">通用语言</h2><h3 id="产生问题的根源">产生问题的根源</h3><p>在TD跟TDD的介绍后,有没有发现一个问题,问题点就是业务干业务的,业务干完了,开发开始干,有问题再去找业务,这个看似协作的亲密无间,实则慢慢互相仇恨。那么导致这些问题产生的问题点在哪呢?大致可以分为如下几块</p><ul><li>业务团队在讨论业务模型时,往往无视技术团队,最后的结果可能就是,你了解下需求开发即可。</li><li>相对的,技术团队也往往无视业务的领域专家参与技术团队的架构模型,因为业务往往对于技术团队的领域架构模型不甚了解。</li><li>缺少通用语言,技术与业务沟通困难。</li></ul><h3 id="统一语言">统一语言</h3><p>统一语言(Ubiquitous Language) 是DDD的核心之一,在我们与业务或产品的交流过程当中,往往是两个世界的人,最经典的案例,莫过于…</p><ul><li>业务:“我想我们的APP有一个功能,他能随着用户手机壳的颜色变化而变化”</li><li>开发此时心里咒骂一万遍,回道:“这是个不可能的需求”</li></ul><p>当然,这个案例可能比较夸张,但是产生这样的问题点在于哪呢? 问题点就在于,作为开发人员,是从技术的角度上,而且更多的是说一些专业的术语, 领域专家则是以软件项目,用户体验的角度上进行诉说。在这个基础上交流,每个人都会按照自己的理解去理解对方的话语,就会导致结果,跟我们以前玩过的一个语言传递游戏一样,第一个人在描述&quot;我摔倒了&quot;,经过了几个人模仿变更,最后一个人说的时候变成了&quot;我在上厕所&quot;。</p><p>举个典型例子,一个电商系统的业务组织项目组开会,这里面有3个开发人员,一个管消息服务,一个管买家服务,一个管卖家服务,此时业务开会说了句,“用户体验感极差”,这是,消息服务人员在想:“客服与客户之间交流体验感不好吗?” 买家服务开发人员在想:“游客是对商品展示是不够友好吗”,卖家服务的开发人员在想:“商家在哪个功能体验不好吗?” 。出现了什么问题,一个用户,出现了至少3种以上的不同理解。</p><p>所以,我们要制定领域模型,将整个领域模型进行合理拆分(具体如何拆分,在后文中会讲),是拆分后的每个单词都有独特的含义,而且被开发人员,架构师,领域专家所认可,这个就可以作为在这个企业,这个项目唯一的通用语言被记录。</p><h3 id="统一语言的优势">统一语言的优势</h3><p>我们了解了统一语言的制定规则,那统一语言可以给我们带来什么样的好处呢?</p><ul><li><p>统一协作</p><p>在需求立项时,由业务专家,架构师跟开发人员一起沟通,不仅能提高沟通质量,减少业务与开发的沟通障碍,更能让业务、产品、研发人员成为一个团队在工作,而不是各司其职。</p></li><li><p>需求的准确性</p><p>业务人员在撰写业务文档时,未必能够考虑的面面俱到,这些缺陷往往需要研发人员指出。</p></li><li><p>编码与设计的一致性</p><p>开发人员直接参与到业务需求的讨论中,可以更明确自己的编码过程与代码设计,使领域驱动的方法论效率最大化。</p></li><li><p>价值回归</p><p>DDD让研发跟业务人员目标一致,避免技术上的求高求新,回归对业务实现的目标上来。</p></li><li><p>交付质量高</p><p>前期充分的沟通与讨论,可以大大的减少程序交付带来的Bug数量。</p></li></ul><h2 id="领域驱动四层架构">领域驱动四层架构</h2><p>分层的价值在于每一层都只代表程序中的某一特定方面,这种限制能使每个方面的设计都更具内聚性。现在我们就说说领域驱动的核心四层:</p><ul><li>展现接口层:我们熟知的<code>Controller</code>,它定义着软件项目要整体完成的项目,与应用层交互的必要通道。</li><li>应用层: 应用层不包含业务规则,它为下一层的领域层对象进行协调任务,分配工作,是他们相互协作,他虽然不包含业务信息,但是可以知道业务走到哪一步了。</li><li>领域层(领域模型): 这是我们要关心的,也是领域驱动业务的核心,他负责着业务逻辑的整体流程,细节,以及对后续基础设施层的实现</li><li>基础设施层:  为上层提供基础服务的能力,例如持久化数据,发送邮件等。</li></ul><h2 id="战略建模">战略建模</h2><h3 id="领域-Domain">领域 (Domain)</h3><p><strong>领域</strong>抽象的可以理解成你要做的业务系统是哪种类型的。比如,你要开发一套仓储管理系统,那么仓储管理范围之内的业务,就是一个领域,也可以称之为仓储管理领域,但是领域有一个明确的界限,不能超出以划分领域的这个范围,比如仓储之上可能存在供应链,那供应链相关的业务就不属于仓储管理领域。相对的,一个仓储管理领域,也可以拆分为各个<strong>子域</strong>,比如仓库管理领域,库存管理领域,用户管理领域,它们是对领域功能的支撑同样子域之间的交互是通过上下文,也就是<strong>限界上下文</strong>,它是子域中域与域之间沟通的桥梁。</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/121148382613129.png" alt="领域"></p><h3 id="子域-Sub-Domain">子域 (Sub Domain)</h3><p>根据上图,可以看出,子域又可细分为核心域、支撑子域与通用子域。</p><ul><li>核心子域 (core):    核心子域,阐述为子域的核心,即为构成领域的核心域,比如<strong>仓储管理领域</strong>中,库存管理域,仓库管理域就是它的核心域。</li><li>支撑子域 (support):    即为支撑核心子域的支撑域,比如仓库管理域中,你可能会用到地图来定位分布在全国各地的仓库,然后根据算法进行调剂功能等业务,那么地理位置管理域即为仓库管理域的子域,因为在<strong>仓储管理领域中</strong>,只有地理位置管理域没有任何价值,它去服务核心域,才能发挥它的价值。这种<strong>为核心域提供支撑的域即为支撑子域</strong>。</li><li>通用子域 (generic):    通用子域就是整个领域中通用的功能,比如掌管登录鉴权的认证授权域,每个子域都会用到,这种通用的域即为通用子域。</li></ul><h3 id="限界上下文-Bounded-Contexts">限界上下文 (Bounded Contexts)</h3><p>限界上下文,是子域之间沟通的桥梁,因为有<strong>限界上下文的存在,才使得统一语言变得真正的唯一</strong>。限界上下文,博主这里总结五个概念:</p><ul><li>合伙 (ParnerShip) : 两个子域之间为合伙关系,内部要素共享,无法分开。</li><li>共享内核 (Shard Kernel):  两个子域之间为紧密合作关系,在代码层面可以抽离出公共的模型作为共享组件。</li><li>跟随 (Conformist): 两个子域为上下游关系,且一定为绑定关系,但是上游系统为主,自己为从,俗称跟屁虫。</li><li>客户供应 (Customer Supplier Teams): 两个子域为上下游关系,虽为强依赖,但是讲究平等,共同发展。</li><li>反腐层(Anticorruption Layer): 两个子域为上下游关系,但是对方都是两个阶级产物,需要一个中间人作为协调。</li><li>分离(Separate Ways): 各走各的,互不干扰。</li></ul><p>我们根据国外一个图来更深入了解下限界上下文的概念:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211130203449499.png" alt="限界上下文"></p><p>先对图文中的关键字进行下解释:</p><ul><li><code>OHS/PL</code>: 开放主机服务/发布语言  其中<code>OHS</code>可以具体解释为远程调用或消息机制实现 ,<code>PL</code>可以解释为远程调用或消息机制实现</li><li><code>ACL</code>: 防腐层,一种转换成下游模型概念</li></ul><p><code>Customer Management Context</code> 为用户管理服务,<code>Customer Self-Service Context</code>用户自服务,在这两个上下文当中,用户管理服务为<code>U</code>,即上游服务,用户自服务为<code>D</code>,即为下游服务,这里上游提供服务,下游则被动接受服务,典型的<strong>客户供应关系</strong>。</p><p><code>Printing Context</code>打印服务上下文,它是一个上游服务,对外提供打印服务,但是假设它是C语言开发的,它是别人提供的服务,对他人提供的服务,其他子域不信任它,所以需要<code>ACL</code>来进行<strong>反腐</strong>处理,转换后才去使用它。</p><p><code>Debt Collection Context</code>借款服务上下文与<code>Plicy Management Context</code>贷款管理为<strong>共享内核关系</strong>,且贷款管理与<code>Risk Management Context</code>风控管理为<strong>合伙关系</strong>。贷款的服务则为客户管理的<strong>跟随</strong>者,因为有客户才能有贷款业务的产生。</p><h2 id="战术设计">战术设计</h2><p>战略是一个建模,是一个方向,而战术则关注如何具体实现,但是不同点是,战略是DDD的精髓,区别于其他设计模式,而战术设计,不仅可以在DDD项目中发挥作用,在其他非DDD项目,也可以发挥它应有的价值。</p><p>战术与战略没有具体的先后,它俩的存在是一个反复的过程,战术根据战略进行设计,相应的战略也可以从战术中获得启发从而改变战略建模,如此,战略跟战术的结合才变得更有意义。</p><p>战术设计的要素包含实体(Entity)、值对象 (Value Object)、聚合 (Aggregate)、资源库 (Repository)、工厂 (Factory)以及领域服务 (Domain Service)。</p><h3 id="实体-Entity">实体 (Entity)</h3><p>这里的实体不是一个由具体属性去定义的对象,而是一个身份的标识线,他可能横跨了整个系统的生命周期,典型标准就是我们熟知的<code>user_id</code>,在别的域当中,可能存储了与这条数据关联的用户。他有如下特性:</p><ul><li>唯一性: 具有唯一的标识,两个即使属性值不一样,但是唯一标识一样的实体,也认为它属于同一实体。</li><li>可变性: 它具有方法,成员变量,数据可变动</li><li>生命周期: 存在一套完整的生命周期的管理</li></ul><p>实体都有唯一标识,但是具有唯一标示的不一定是实体,重要的是一个对象产生时,就需要为方便系统追踪而创建。</p><h3 id="值对象-Value-Object">值对象 (Value Object)</h3><p>简单来说,值对象可以理解为实体所携带的固有信息。比如我有一本《DDD领域驱动设计》书,这里<strong>我</strong>就是实体,**《DDD领域驱动设计》**就是我的值对象。它有以下特性:</p><ul><li>不可变性: 他与实体的最大区别就在这,它是一个固有的不可变的对象,一旦创建不可变,比如《DDD领域驱动设计》,你可以扔,可以不看,但是你不能去修改这本书,修改了<strong>这本书就不是这本书</strong>了</li><li>可替代性: 虽然它不可变,但是可以完全替换掉,我觉得《DDD领域驱动设计》这本书写的不好,我可以换一本看。</li><li>整体性:  它不仅可以包含业务数据,也可以包含校验逻辑,以及数据的完整性, 比如一个值对象是6元,看上去是一个实际包含了两个数据,数字6,跟货币单位元。它的用途就是将一些复杂的元素合成一个,变成唯一的一个值对象,可以度量,也可以描述一个事务,度量就是6元,描述,往往指的一个地址,比如中华人民共和国山东省济南市市中区,而且如果你不需要他了,扔掉即可。</li></ul><p>在值对象的设计当中,要注意以下几点:</p><ul><li>首先,<strong>值对象跟数据库对象不是一个东西</strong>,用惯了现在的ORM数据处理,习惯了把类中类一一映射到数据库当中,但是这种方式在领域驱动设计当中不是不能,而是不推荐</li><li>其次,在设计<code>值对象</code>甚至是<code>实体</code>的时候,应<strong>优先去考虑业务场景</strong>,而<strong>不是优先去考虑数据库的设计</strong>。</li><li>值对象依托于实体,而实体不建议去依托于值对象。</li></ul><h3 id="聚合-Aggregate">聚合 (Aggregate)</h3><p>实体标识一致则为一致的特性,也会有它的副作用,最明显的就是,一个实体的内容修改了,另一个却不同步,为了解决这个问题,所以引入了聚合的概念。它有如下特点:</p><ul><li>统一管理:在设计过程中,对同一类实体,值对象做统一管理,怎么定义同一类,由自身业务决定,在确保一致性的情况下尽量缩小范围</li><li>事务一致性:聚合内的实体与值对象,需要有高度的一致性。</li><li>聚合根: 每一个聚合必定有一个聚合根,所有数据的传递,都有它来决定。</li><li>聚合根的唯一性: 聚合根必须有唯一标识性,方便其他聚合调用,聚合内部只能对外暴露聚合根,不能直接被其他聚合直接引用,否则将失去应有的意义。</li></ul><p>对于上述抽象的可以理解为,你是电商项目组的订单服务组,你跟你的组员都是实体或者值对象,隶属于订单服务组,这个组齐心协力一起去搞定订单服务,一切上级的传达由组长来告知。</p><h3 id="工厂-Factory">工厂 (Factory)</h3><p>上文中,我们介绍了实体,值对象,聚合,但是你会发现,他们的关系如果创建起来是个极为复杂的过程,而且重复的工作也需要浪费不少的时间,因此,我们需要考虑把创建聚合的过程进行封装,它不会去替代原本的业务,只会把复杂的过程进行封装,这个封装的模式,就为工厂模式,对于工厂模式的介绍与使用,可以参考博主的另一篇博文 <a href="https://blog.timeroar.com/posts/20533.html">设计模式之工厂模式</a> 。</p><h3 id="资源库-Repository">资源库 (Repository)</h3><p><code>Repository</code>这个名词,我们经常见的就是<code>Spring</code>中的<code>@Repository</code>注解,代表持久层的意义,那持久层跟这里的资源库的区别在哪呢? 区别就是,资源库专注于对业务的操作,而持久层专注于对表的的CRUD操作,而且它俩并不冲突,在领域层模型中,它是资源库的实现。</p><p>在领域模型的资源库,你可以理解为它是一个容器,他主要负责不同聚合之间的管理工作。具体工作如下:</p><ul><li>分离领域模型与数据模型 他清晰的定义了这两者的边界,由它去对接持久层进行数据的存储,也由他对接客户端,客户端只需对它下达指令,由它去统一调度聚合执行工作。</li><li>由它去严格的限制只能通过聚合根传递数据</li></ul><h3 id="领域服务-Domain-Service">领域服务 (Domain Service)</h3><p>领域服务,可以理解为在执行一个业务逻辑处理的流程过程当中的服务,它的特点就是:</p><ul><li>无状态  它是一个一代而过的服务。</li><li>无法融入  它不属于业务流转过程任何一类,即不属于实体,值对象,聚合等等。</li><li>内聚转换  它只关注于做一件事情,并且对于业务数据有一定的处理转换操作。</li></ul><p>现实中最经典的就是密码加密服务,就是一种无状态的领域服务。</p><h2 id="领域建模方法论">领域建模方法论</h2><p>微服务项目的拆分是一个非常复杂的过程,往往我们需要考虑拆分后的架构可以演进,迭代,而且还有可能有遗留老系统需要进行兼容,如何跟业务沟通,如何运用DDD来进行领域拆分呢,这里就需要一些方法论的支撑。</p><h3 id="什么是方法论">什么是方法论</h3><blockquote><p>方法论是为用于研究的上下文的框架,它是一种基于观点,信念和价值观的连贯逻辑方案,可指导研究人员或其他用户做出选择。</p></blockquote><h3 id="常见的方法论">常见的方法论</h3><ul><li>CBM-组件化业务模型</li><li>SOA-面向服务架构模型</li><li>UML-软件设计模型</li></ul><p>上面三种都是很好的企业架构的模型,有兴趣的可以自行搜索,它们都跟领域有关,但都不是专有的领域模型。</p><h3 id="事件风暴-Event-Storming">事件风暴(Event Storming)</h3><p>DDD的思想很重要,但是也难以掌握,为了掌握DDD所以出现了轻量级的建模方法,就是事件风暴 (Event Storming)。</p><p>事件风暴是以<strong>探索复杂业务领域为目的的研讨会</strong>。目的如下:</p><ul><li>为统一语言做基础铺垫,使整个商业流程共同理解。</li><li>事件风暴后,将获得一份整体流程的概览图</li><li>能在探讨过程当中找出更多的核心价值,机会。</li></ul><p>它的优点也很明显:</p><ul><li>在事件风暴中,不要构建负载的UML关系图,也不用数据建模,有效降低了创建全面业务模型的时间,本来花费几周的事情,可能在一次研讨会中就确立了。</li><li>统一参与,增加了团队人员的参与感,业务人员与开发人员可以进行良好的沟通,提高了参与者的专业知识。</li></ul><p>既然事件风暴的好处这么多,那么如何建立事件风暴呢?</p><ul><li>找一个可移动的大白板或者一张可收纳的纸,方便进行另一场事件风暴,面积越大越好,因为你无法预测你最后能有多大的产出。</li><li>准备一堆便签</li><li>准备开始嘴炮与贴纸游戏,完成事件风暴</li></ul><p>事件风暴结束后,你们的成果可能就是这个样子的:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211201204248462.png" alt="事件风暴"></p><p>这些五颜六色的纸,在事件风暴的定义中也是有意义的,根据官网大致定义如下:</p><ul><li>橘色（正方形76*76）：Event 事件</li><li>蓝色（正方形）：Command 命令</li><li>紫色（长方形）: Policy/Process 商业政策/流程</li><li>黄色（小张长方形）:Actor 角色</li><li>黄色（长方形）:Aggregate 聚合</li><li>粉红色（长方形）：System 外部系统</li><li>红色（正方形）:Hotspot 热点</li><li>红色（小张长方形）:Problem 疑问</li><li>绿色（小张长方形）:Opportunity 机会</li><li>绿色（正方形）：Read Model 资料读取模型</li><li>白色（大张正方形）：Uset Interface 使用者介面</li></ul><p>想更深入了解事件风暴,可以参考官网:</p><blockquote><p>​<a href="https://www.eventstorming.com/">https://www.eventstorming.com/</a></p></blockquote><h2 id="领域模型">领域模型</h2><p>领域模型过程当中,我们常听说的有<strong>贫血模型</strong>、<strong>充血模型</strong>,那么这里的血是什么呢? 这里的<strong>血是业务逻辑</strong>。</p><ul><li>贫血模型: 我们常见的 getter setter方法,天天CRUD</li><li>充血模型: 应用逻辑为主,数据管理为辅</li></ul><p>但是实际当中,它们各有优劣,贫血模型的好处就是上手极快,适用于应用逻辑简单,替代Excel表格的信息记录业务,但是发展很受限制。相应的,充血模型上手极难,但是容易适应复杂的业务场景,可拓展性高。</p>]]></content>
      
      
      <categories>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构师 </tag>
            
            <tag> 软件设计原则 </tag>
            
            <tag> 架构师之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的艺术-Synchronized的原理</title>
      <link href="/posts/55233.html"/>
      <url>/posts/55233.html</url>
      
        <content type="html"><![CDATA[<h1>并发编程的艺术-Synchronized的使用及原理</h1><h2 id="简介">简介</h2><p>线程可以给我们带来性能上的提升,但是也会给我们带来一系列不可控问题,而这些不可控问题中,最常见的就是<strong>线程的安全问题</strong>。<code>synchronized</code>就是解决线程安全问题的方法之一。</p><p><code>synchronized</code>是一把同步锁,具有互斥性,加入<code>synchronized</code>关键字后,在同一时间内,有且只有一个线程可以去调度某个方法。</p><h2 id="使用">使用</h2><p>由于<code>synchronized</code>的存在,会使原本的多线程异步操作,又变回了同步操作,势必又会影响许多性能问题,所以在具体使用过程当中,我们只需要去保护可能存在线程安全的方法即可。<code>synchronized</code>的使用有两种,分别是</p><ul><li>类锁</li><li>对象锁</li><li>代码块锁</li></ul><p>在了解这两把锁之前,我们先看一个存在线程安全问题的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticSynchronized</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">StaticSynchronized</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StaticSynchronized</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的创建了两个线程,由两个线程同时调度<code>StaticSynchronized</code>类的递增方法,我们对于这段代码实际预期结果为<code>200000</code>,但是实际呢?来看看执行三次的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行结果为<span class="token operator">:</span><span class="token number">130222</span>执行结果为<span class="token operator">:</span><span class="token number">105066</span>执行结果为<span class="token operator">:</span><span class="token number">104079</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以发现预期结果远远不到预期值,这个时候就需要我们的主角<code>synchronized</code>。</p><h3 id="类锁">类锁</h3><p>类锁是一把全局锁,多个线程调用多个实例对象的<code>synchronized</code>方法时,会产生互斥,类锁的使用有两种方式</p><ul><li><p>方式一: 修饰静态方法</p><p>将<code>StaticSynchronized</code>类中的<code>increment()</code>静态方法加上<code>synchronized</code>的关键字</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行结果为<span class="token operator">:</span><span class="token number">200000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>方式二: 修饰代码块</p><p>我们结合定义中的多实例互斥来举例:</p><ol><li>首先创建一把锁</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lock</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建两个待线程调度的类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassSynchronizedOne</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassSynchronizedTwo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动两个线程,并同时启动</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassSynchronizedTwo</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSynchronizedTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ClassSynchronizedOne</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSynchronizedOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> one<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"这是one线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> two<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"这是two线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>打印结果如下:</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">当前线程这是one线程当前线程这是one线程当前线程这是one线程当前线程这是one线程当前线程这是one线程当前线程这是one线程当前线程这是one线程当前线程这是one线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据结果你会发现,只有一个线程在执行,哪个线程抢到了锁,哪个线程执行。</p></li></ul><h3 id="对象锁">对象锁</h3><p>对象锁则是多个线程调用同一个实例对象的同步方法时才会产生互斥,它也有两种方式</p><ul><li>方式一: 修饰普通方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方式二: 修饰代码块,我们同样以一个多线程调用的示例来体现,我们对上述代代码中的<code>Lock.class</code>类锁的方式改为对象锁</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">当前线程这是one线程当前线程这是two线程当前线程这是one线程当前线程这是two线程当前线程这是two线程当前线程这是one线程当前线程这是two线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现这两个线程没有相互干扰,各执行各的。</p><p>综上两种锁形式,我们可以做一个总结</p><ul><li><strong>对于静态方法加锁,锁为当前类的Class对象</strong>(类锁方法一)</li><li><strong>对于普通方法加锁,锁为当前实例的对象</strong>         (对象锁方法一)</li><li><strong>对于同步方法块,锁由当前Synchronized括号里配置决定,Class则为类锁,实例对象则为对象锁</strong> (类锁对象锁的方法二)</li></ul><h2 id="Mark-Word锁标记">Mark Word锁标记</h2><p>在使用过程当中,我们会发现,<code>synchronized</code>想要实现多线程访问的互斥性,势必要满足以下两个条件:</p><ul><li>有一个共享资源作为竞争的对象</li><li>这个竞争的对象势必有一个标记来决定是不是在锁的状态</li></ul><p>那么,这个标记在哪呢?他又存储了什么信息呢?</p><p>首先,Java的存储结构可以分为三个部分:</p><ul><li>对象头 :见下文</li><li>实例数据 : 包含对象的所有成员变量</li><li>对齐填充:  保证对象的大小是8字节的整数倍</li></ul><p>而对象头,同样也由三部分组成:</p><ul><li>Mark Word:存储<strong>锁标记</strong>,分代年龄,hashCode等信息</li><li>Klass Pointer: 指向方法区的Class信息的指针,可以理解为当前对象是哪个Class的实例</li><li>Array Length:   表示数组的长度,只有当前对象是数组的时候才会有此属性</li></ul><p>大家看到没,锁标记的存储位置,就是<strong>Mark Word</strong>,那么Mark Word在不同锁状态下是如何变化的呢,我们来看图例:</p><p>由于32位跟64位的不同所以我们分开来看,先看32位的。</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211117224703355.png" alt="32位系统MarkWord的状态变化"></p><p>再来看64位的</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211117225229784.png" alt="64位锁标记状态"></p><p>从上图中,我们可以知道,锁一共有五种状态,分别是无锁、偏向锁、轻量级锁、重量级锁、GC标记,在MarkWord当中,他们用2bit来进行存储,但是2bit只能由00、01、10、11四种数据来表示,所以才会有1bit的偏向锁标记</p><p>这时候,又懵逼了,锁就是锁,怎么还有偏向锁、轻量级锁、重量级锁,其实,这涉及到了一个锁升级的过程,这个过程一共有四个级别,从低到高依次为无锁、偏向锁、轻量级锁、重量级锁。这个升级的过程,为了确保锁竞争的操作为<strong>原子性</strong>操作(所谓原子性,跟数据库的原子性概念差不多,要不然全部成功,要不全部失败),底层通过CAS来完成。为了更好的讲解锁升级的过程以及每种锁的原理,我们首先了解一下什么是CAS。</p><h2 id="CAS的原理">CAS的原理</h2><p>CAS,全称CompareAndSwap,也有叫做CompareAndSet, 它是一个能够比较和替换的方法,在java源码中,它们是一个<code>native</code>方法,这些方法能够在多线程环境下保证对共享变量修改时的原子性。由于<code>CompareAndSwap</code>的一系列方法在JDK的Unsafe类中属于native<code>方法,也就是说它们在JVM层面实现的,所以我们需要从Java以及JVM层面两种不同的环境进行分析,首先我们来看Java层面,这里使用</code>compareAndSwapInt`的处理机制举例,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>                                              <span class="token keyword">int</span> expected<span class="token punctuation">,</span>                                              <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在代码中,</p><ul><li>o:   代表当前实例的对象</li><li>offset:  表示目标变量在实例对象中内存地址的偏移量</li><li>expect: 表示预期的值</li><li>update: 表示需要更新的值</li></ul><p>这么说可能有些抽象,我们看一个我们常用类的源码-<code>AtomicInteger</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicInteger</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset                <span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            v <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中我们可以分析出如下信息:</p><ul><li>从静态代码块初始化,我们可以知道,<code>valueOffset</code>是<code>AtomicInteger</code>中成员变量<code>value</code>在内存当中的偏移量,这里就对应了<code>compareAndSwapInt</code>中的第二个参数<code>offset</code></li><li>源码当中的<code>this</code>,表示当前实例对象,对应着<code>compareAndSwapInt</code>的第一个参数</li><li><code>v = getIntVolatile(o, offset)</code>,表示在当前实例的偏移值,获取当前实例的<code>value</code>,所以如果在<code>v</code>获取后没有其他线程去篡改<code>value</code>的情况下 <code>while</code>循环时的<code>v</code>应该等于<code>value</code></li><li><code>compareAndSwapInt(o, offset, v, v + delta)</code> <code>v</code>即为预期值, 如果<code>v</code>等于内存中的<code>value</code>即预期值与内存当中的值是一致的,<code>v + delta</code> 则更改为新的值<code>v + 1</code></li></ul><p><code>AtomicInteger</code>通过一个do…while的一个自我循环的方式不断地去尝试对value进行累加,这种行为,我们称之为<strong>自旋</strong></p><h2 id="锁升级的流程">锁升级的流程</h2><p>当一个线程访问了使用了<code>synchronized</code>修饰的代码时,就会触发加锁流程:</p><ul><li>如果偏向锁在jvm层是开启状态,则尝试获取<strong>偏向锁</strong>来获得资源</li><li>如果当前已经有其他线程获取了偏向锁,此时锁就会升级为<strong>轻量级锁</strong>,如果轻量级锁依旧被占用,则膨胀为重量级锁。</li><li>尝试获取轻量级锁的线程开始自旋操作,如果多次自旋仍无法获得锁,则会升级为<strong>重量级锁</strong>进入线程等待。</li></ul><p>流程图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/%E9%94%81%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B.png" alt="锁升级流程"></p><h2 id="偏向锁">偏向锁</h2><p>我们在书写多线程时,考虑到线程安全问题,故用到了<code>synchronized</code>对代码进行加锁操作,但是当前代码可能并不存在多线程竞争关系,而且总是同一个线程获得这把锁。为了降低这种情况发生时获得锁的代价,所以引入了偏向锁的概念</p><h3 id="偏向锁的获取">偏向锁的获取</h3><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/%E5%81%8F%E5%90%91%E9%94%81.drawio.png" alt="偏向锁的获取流程"></p><ul><li>当一个线程访问用<code>synchronized</code>的修饰的同步代码块尝试获取锁时,会在<strong>Mark Word</strong>里校验当前的锁表示是否为偏向锁,如果不是,则通过根据锁表示去用其他锁竞争。</li><li>如果当前锁是偏向锁,则判断Mark Word对象头当前存储指向是否为当前线程,如果是,则说明当前线程已获得锁</li><li>如果MarkWord存储指向的线程不是当前线程,通过<strong>CAS</strong>方式去替换MarkWord线程信息,如果失败,则需要通过锁升级变为轻量级锁去完成锁的抢占过程。</li><li>如果替换成功,则获取偏向锁执行同步代码块</li></ul><h3 id="偏向锁的撤销">偏向锁的撤销</h3><p>当另一个线程去尝试竞争偏向锁时,会触发偏向锁的撤销。</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/%E5%81%8F%E5%90%91%E9%94%81%E7%9A%84%E6%92%A4%E9%94%80.png" alt="偏向锁的撤销"></p><ul><li>当线程二尝试用CAS方式替换MarkWord头信息失败时,触发偏向锁撤销操作。</li><li>偏向锁触发操作将在<strong>全局安全点</strong>时触发,全局安全点(SafePoint): 这个时间点上没有正在执行的字节码,即在此时间内,线程的状态,堆对象的状态是可以被确定的,在这个时间点上,JVM可以安全的执行GC等操作。</li><li>偏向锁触发操作开始后,会暂停已获得偏向锁的线程(线程1)的操作。</li><li>若获得偏向锁的线程已经执行完毕,或者非活状态,偏向锁会撤销为无锁状态,同时线程二升级为轻量级锁,进行资源抢占</li><li>若获得偏向锁的线程正在执行,会直接将锁对象升级为轻量级锁,并指向线程1,此时线程1持有轻量级锁,线程2进入竞争锁状态</li></ul><h3 id="关闭偏向锁">关闭偏向锁</h3><p>如果你确定你的线程永远在竞争状态,可以通过JVM参数进行关闭</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">UseBiasedLocking</span><span class="token operator">=</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外,偏向锁默认会在应用程序启动数秒之后才会被激活,如果想立即激活请执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">BiasedLockingStartupDelay</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重新偏向">重新偏向</h3><p>偏向锁一旦升级后,是不可逆,但是我们可以通过JVM启动参数来尝试重新偏向</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">BiasedLockingBulkRebiasThreshold</span><span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述指令的意思时如果连续10次都是同一线程访问并获取锁(当前<strong>锁级别为轻量级锁</strong>),则会触发重新偏向,由轻量级锁转变为偏向锁。</p><h2 id="轻量级锁">轻量级锁</h2><p>在偏向锁升级后或者主动关闭偏向锁后,程序执行<code>synchronized</code>代码块时会使用轻量级锁来抢占资源。</p><h3 id="轻量级锁的获取">轻量级锁的获取</h3><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png" alt="轻量级锁的获取"></p><ul><li>当线程访问<code>synchronized</code>修饰的代码块时,会为当前线程分配一个锁记录空间,HotSpot源码中它为<code>BasicObjectLock</code>对象</li><li>将<strong>无锁状态的Lock锁对象</strong>的MarkWord设置到当前线程的锁记录中。这样获取偏向锁的前置条件即完成。</li><li>通过CAS的方式修改Lock锁对象的MarkWord使其指向当前线程,成功,即获得轻量级锁,失败,则当前Lock锁对象不是无锁状态,膨胀为重量级锁</li></ul><blockquote><p>​在多数材料,以及其他大部分网站对轻量级锁的描述中,轻量级锁获取锁失败,会出现<strong>自旋</strong>的过程,但是在HotSpot源码中,自旋操作是在膨胀到重量级锁的过程当中,也就说此时自旋只是在膨胀过程,并非自旋获取轻量级锁</p></blockquote><h3 id="轻量级锁的释放">轻量级锁的释放</h3><p>轻量级锁释放,会使用CAS原子操作,将锁记录中无锁状态的Mark Word替换回到Lock锁对象的Mark Word中,如果这个过程顺利进行,则轻量级锁释放完成,否则触发膨胀机制,膨胀完成后再由重量级锁的方式进行解锁。</p><h3 id="轻量级锁与偏向锁">轻量级锁与偏向锁</h3><p>总体来说,相比较偏向锁,轻量级锁的实现原理比较简单,功能上不同的地方就是:</p><ul><li>偏向锁用于当前代码块中只被同一线程访问的场景</li><li>轻量级锁则为不同时间内的不同的线程访问代码块的场景</li></ul><h2 id="重量级锁">重量级锁</h2><p>在轻量级锁加锁失败后,会膨胀为重量级锁。膨胀流程如下:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E8%86%A8%E8%83%80%E6%B5%81%E7%A8%8B.png" alt="重量级锁膨胀流程"></p><p>锁膨胀开始时,将创建检测对象<code>ObjectMonitor</code>,然后通过CAS并自旋的方式尝试将Lock锁对象中的Mark Word 指向监测对象。</p><h3 id="重量级锁的获取">重量级锁的获取</h3><p>在锁膨胀完成后,或者当前已经为重量级锁的等级下,开始重量级锁的加锁流程,具体流程如下:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81.png" alt="重量级锁的获取"></p><ul><li>首先线程尝试获取重量级锁,判断对象检测<code>ObjectMonitor</code>对象是否已经释放锁,成功则执行代码,失败则自旋重试</li><li>当达到一定自旋次数,也就说重入次数时,则会进入阻塞队列,等待释放锁的线程来唤醒它</li></ul><h3 id="重量级锁的释放">重量级锁的释放</h3><ul><li>在对象检测<code>ObjectMonitor</code>对象中,有一个<code>_owner</code>标识,将其修改为<code>null</code>即表示当前线程已释放锁,可被其他线程自旋判断。</li><li>从阻塞队列当中唤醒一个阻塞线程</li><li>由于<code>synchronized</code>是一把非公平锁,所以如果一个阻塞线程被释放,这时又有一个新的线程在自旋判断是否监测对象已经释放锁,并且这时<code>_owner</code>标识正好是已释放状态,这时很有可能新的线程得到锁,而刚被释放的线程再次进入阻塞状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原子性 </tag>
            
            <tag> Synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构师之路-七大软件设计的原则</title>
      <link href="/posts/65132.html"/>
      <url>/posts/65132.html</url>
      
        <content type="html"><![CDATA[<h1>架构师之路-七大软件设计的原则</h1><h2 id="引文">引文</h2><p>设计的原则,可以帮助我们设计出更加优雅的代码结构,增加代码的可读性以及可维护性,但是在实际应用的过程当中,并不一定非得完全可以的去遵循,需要结合实际的业务需求以及外部因素(人力,时间),从中进行取舍。</p><p>软件设计原则包含七大设计原则,分别是:</p><ul><li>开闭原则</li><li>依赖倒置原则</li><li>单一职责原则</li><li>接口隔离原则</li><li>迪米特法则</li><li>里氏替换原则</li><li>合成复用原则</li></ul><h2 id="开闭原则-OCP">开闭原则(OCP)</h2><blockquote><p>Software entities like classes, modules and functions should be open for extension but closed for modifications.</p></blockquote><p>开闭原则 (Open Closed Principle ) :一个软件实体,如类,模块和函数应该对扩展开放,对修改关闭。</p><p>开闭原则的目的是提高软件系统的<strong>可复用性</strong>以及<strong>可维护性</strong>,在代码过程当中,用抽象的方式去设计框架,由实现去扩展细节,所以,开闭原则的设计思想就是<strong>面向抽象的编程</strong></p><p>样例:假设现在我们有一个需求,我有一个衬衣,它的品牌是鸿星尔克。我们依照开闭原则,进行设计:</p><ul><li>首先,我们解读它的需求,他现在是衬衣,以后也有可能夹克,T恤等,但是他们都是衣服,所以定义一个顶层设计:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IClothes</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 品牌 */</span>    <span class="token class-name">String</span> <span class="token function">brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 类型 */</span>    <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接着,我们定义抽象类,并实现接口的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClothes</span> <span class="token keyword">implements</span> <span class="token class-name">IClothes</span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此时,为了不去修改原本获取品牌与类型的逻辑,我们需要集成这个类,并由这个类去调用对应的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shirt</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractShirt</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"衬衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token string">"鸿星尔克"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,我们可以不用去修改调用的方法,还可以横向无限拓展。在<code>Spring Security</code>源码中<code>Authentication</code>的写法就完美的符合开闭原则 它的类图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211114212326934.png" alt="Authentication关系图"></p><h2 id="依赖倒置原则-DIP">依赖倒置原则 (DIP)</h2><blockquote><p>High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p></blockquote><p>依赖倒置原则 (Dependence Inversion Principle,DIP)  : 高层模块不应该依赖底层模块， 二者都应该依赖其抽象。 抽象不应该依赖细节；细节应该依赖抽象。</p><p>定义可能模糊,其实,它的目的是让我们<strong>面向接口的编程</strong>,而不是面向实现的编程,定义中的<strong>高层指的是调用者</strong>,而<strong>底层则是被调者</strong>。面向实现的编程,那就是正向依赖,相当于我在这就得这么干,而面向接口的编程,则是依赖倒置,通过依赖倒置,可以减少类与类之间的耦合性，提离系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。</p><p>依旧通过一篇代码来说明下依赖倒置原则</p><ul><li><p>面向实现的编程</p><p>底层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shopping</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyErke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买鸿星尔克牌的衬衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyHla</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买海澜之家牌的衬衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>高层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoShopping</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Shopping</span> shopping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shopping<span class="token punctuation">.</span><span class="token function">buyErke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shopping<span class="token punctuation">.</span><span class="token function">buyHla</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过面向实现的编程,我们可以看到,如果不再局限于买这两个牌子的衬衣,我想在买<code>李宁</code>牌的衬衣,那我不光要在<code>Shopping</code>类增加代码,我还要再高层修改代码,高层完全依赖底层。</p></li><li><p>面向接口的编程</p><p>底层-抽象类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClothes</span> <span class="token keyword">implements</span> <span class="token class-name">IClothes</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此处省略与开闭原则重复代码,增加抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>底层-Erke牌衬衣</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErkeShirt</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClothes</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买鸿星尔克牌的衬衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>底层-Hla牌衬衣</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HlaShirt</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClothes</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买海澜之家牌的衬衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>底层-改造后的<code>Shopping</code>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shopping</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doShopping</span><span class="token punctuation">(</span><span class="token class-name">AbstractClothes</span> clothes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        clothes<span class="token punctuation">.</span><span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>高层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoShopping</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Shopping</span> shopping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shopping<span class="token punctuation">.</span><span class="token function">doShopping</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErkeShirt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shopping<span class="token punctuation">.</span><span class="token function">doShopping</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HlaShirt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,我不管想购买什么牌子的衬衣,我只需要在创建一个新的牌子类,在高层调用即可,完全不用去修改底层的类。所以,在工作中,如果拿到一个需求,看看是不是可以从顶层再到具体细节再来设计</p></li></ul><h2 id="单一职责原则-SRP">单一职责原则 (SRP)</h2><blockquote><p>There should never be more than one reason for a class to change</p></blockquote><p>单一职责 (Simple Responsibility Pinciple, SRP)  永远不应该有多于一个原因来改变某个类。</p><p>对于一个类,有且仅有一个可以使它变动的原因,假设这个类有两个职责,一旦需求变更,修改其中一个会导致另外一个出现bug,那等同于这个类存在于两个导致影响它的原因,这就好比我们的团队,各司其职不受影响,一旦插手可能越来越乱。</p><p>例如下面的例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shopping</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shop</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hla"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">doSomething</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我给自己买了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">doSomething</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我买给别人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我准备刷卡买"</span> <span class="token operator">+</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子判断了逛的牌子是不是<code>HLA</code>,是与不是都是刷卡买,只是给不给自己买的区别,如果这个时候,我发现,<code>HLA</code>店里跟支付宝合作了!有大量优惠,我不想刷卡买了,这个时候我如果动了<code>doSomething</code>方法,势必会影响到其他的方法,因为这类的的职责,不光管理着<code>hla</code>,还管理着其他,这就是所谓的修改了其中一个会导致另一个出现问题。</p><h2 id="接口隔离原则-ISP">接口隔离原则  (ISP)</h2><blockquote><p>The dependency of one class to another one should depend on the smallest possible interface.</p></blockquote><p>接口隔离原则（Interface Segregation Principle）: 一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。</p><p>此原则设计思想,就是我们常说的<strong>高内聚,低耦合</strong> , 定义的解释我们可以这么理解,在设计接口的时候,我们一定要充分的考虑业务模型,不要对外暴漏没有任何意义的接口,要建立单一细化的接口,而不是臃肿的接口。例如:</p><ul><li><p>设计一个顶层接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//动物顶层接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//吃</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//跑</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//飞</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>两个简单的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//老虎</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tigger</span> <span class="token keyword">implements</span> <span class="token class-name">IAnimal</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//鸟</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">implements</span> <span class="token class-name">IAnimal</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家发现问题没,是不是很搞笑,老虎会飞吗? 鸟会跑吗? 对于老虎暴漏<code>fly</code>接口方法没有任何意义,同理,对鸟暴漏<code>run</code>接口方法也没意义,所以这时候,我们就要细化接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEatAnimal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFlyAnimal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRunAnimal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前动物需要什么行为就去实现对应行为,如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tigger2</span> <span class="token keyword">implements</span> <span class="token class-name">IEatAnimal</span><span class="token punctuation">,</span> <span class="token class-name">IRunAnimal</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="迪米特法则-LOD">迪米特法则  (LOD)</h2><blockquote><p>Only talk to you immediate friends</p></blockquote><p>迪米特原则(Lawof Demeter) 又叫<strong>最少知道原则</strong>(LeastKnowledge Principle) 简称LKP: 只与你最直接的朋友交流。</p><p>在代码设计中—个对象应该对其他对象保持最少的了解,意思就是,一个类不要去依赖太多的类,尽量降低类与类之间的耦合。所谓直接交流的朋友,可以理解为出现在成员变量中,方法的输入及输出中的类,而出现在方法内部的类,则不是朋友。案例如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">River</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countFish</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fish</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"河里有"</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkRiver</span><span class="token punctuation">(</span><span class="token class-name">River</span> river<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fish</span><span class="token punctuation">></span></span> fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        river<span class="token punctuation">.</span><span class="token function">countFish</span><span class="token punctuation">(</span>fish<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面关系我们根据迪米特法则,可以发现,其实<code>Person</code>最后只想知道的河里有几条鱼,而鱼的数量应该由当前的<code>River</code>统计而不是人去数,改造变更为如下代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">River</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countFish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fish</span><span class="token punctuation">></span></span> fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"河里有"</span> <span class="token operator">+</span> fish<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkRiver</span><span class="token punctuation">(</span><span class="token class-name">River</span> river<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        river<span class="token punctuation">.</span><span class="token function">countFish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,完成了迪米特法则的要求</p><h2 id="里氏替换原则-LSP">里氏替换原则 (LSP)</h2><blockquote><p>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p></blockquote><p>里氏替换原则 (Liskov Substitution Principle)是指使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。</p><p>定义可能是比较抽象的,其实我们可以这么理解,如果一个程序适用与一个实体的父类,那么这个父类的子类也必定可以在这个程序中适用,程序原本逻辑还不会被改变,反之则不一定。这样,我们可以在继承的概念上再往下引申一条,就是<strong>子类可以增加自己特有的方法,但不能覆盖父类的非抽象方法</strong>。</p><p>它的优点很明显:</p><ul><li>约束继承泛滥</li><li>需求变更的兼容性提高,以及程序的可维护性,可拓展性的提高</li></ul><p>我们用代码做个示例:</p><ul><li>创建个父类-青蛙</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//青蛙</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Frog</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**     * 腿     * */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> leg<span class="token punctuation">;</span><span class="token comment">//几条腿</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token class-name">Frog</span> area<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> area<span class="token punctuation">.</span><span class="token function">getLeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> leg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeg</span><span class="token punctuation">(</span><span class="token keyword">int</span> leg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>leg <span class="token operator">=</span> leg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建个子类-蝌蚪</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tadpole</span> <span class="token keyword">extends</span> <span class="token class-name">Frog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token class-name">Tadpole</span> tadpole<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tadpole<span class="token punctuation">.</span><span class="token function">getLeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码我们可以看见,蝌蚪是没有退的,如果这时候把子类蝌蚪调用改成青蛙,势必只返回了青蛙0条腿,这样就违背了里氏替换原则</p><h2 id="合成复用原则-CARP">合成复用原则 (CARP)</h2><blockquote><p>Favor delegation over inheritance as a reuse mechanism</p></blockquote><p>合成复用原则 (Composite/Aggregate Reuse Principle,CARP) 指当要扩展类的功能时，优先考虑使用组合，而不是继承。</p><p>换言之就是,当我们需要对某个类的功能进行拓展时,尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到拓展要用的目的。</p><p>优点就是,类中的具体实现细节不会暴漏给外界</p><p>示例如下</p><ul><li><p>创建一个逛街的细节</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> doShopping <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"拎着包带着钱去逛街"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建个去逛街的人</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> doShopping doShopping<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whoDoShop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老婆"</span> <span class="token operator">+</span> doShopping<span class="token punctuation">.</span><span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> com<span class="token punctuation">.</span>timeroar<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>design<span class="token punctuation">.</span>carp<span class="token punctuation">.</span>doShopping <span class="token function">getDoShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> doShopping<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDoShopping</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>timeroar<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>design<span class="token punctuation">.</span>carp<span class="token punctuation">.</span>doShopping doShopping<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>doShopping <span class="token operator">=</span> doShopping<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这样,我们就在没有继承<code>doShopping</code>类的情况下,完成了对逛街人的拓展。</p>]]></content>
      
      
      <categories>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构师 </tag>
            
            <tag> 软件设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构师之路-系统重构的前置条件</title>
      <link href="/posts/33741.html"/>
      <url>/posts/33741.html</url>
      
        <content type="html"><![CDATA[<h1>架构师之路-系统重构的前置条件</h1><p>在我们的工作当中,难免会遇到系统架构重构的问题,但是我们不能盲目的进行系统重构,因为重构的成本,代价还是很大的,那么什么时候,或者契机的情况下才能适合重构呢?</p><h2 id="系统重构的标准因素">系统重构的标准因素</h2><ol><li><p>当架构不能再去适应业务发展的需要时。</p><p>重构系统,往往是我们已经对现有系统架构无可奈何之时,因为重构的前提往往是我们的系统已经部署到生产环境,虽然当前系统可能有问题,也有可能很烂,但是这很正常,没有一个系统的架构是完美无缺的,至少现在的它能在生产上跑,能满足现有业务需求,所以,<strong>能不动,尽量不去动</strong>它。但是如果业务发展就是很快,用户体系也日益增多或者现有架构可能满足,但是无法在未来几年之后达到业务发展以及用户的需求,这时候你就<strong>不能以技术的阻碍去影响公司业务的发展</strong>,此时就需要重构。</p></li><li><p>前人挖坑无法填,代码紊乱无法直视</p><p>我们作为一名优秀的程序员,往往会有一种情结,就是,前面人写的代码太垃圾,无法直视,举些例子比如服务api想怎么写怎么写,本来一个服务对用户负责,结果用户服务层还掺着订单接口,后来人员跟代码都能跟的一脸懵逼,简单总结就是<strong>开发一时爽,维护火葬场</strong>的代码。这种情况,我们可以去<strong>主张重构</strong>,但是也得想清楚会<strong>带来的风险以及代价</strong>。因为往往这种情况下,代码是可以在生产上运行的,业务人员或者用户不会去关心你代码怎么写的,只关心功能是不是正常。</p></li></ol><h2 id="系统重构的风险因素">系统重构的风险因素</h2><ol><li><p>系统重构对原有功能带来风险</p><p>简单来说就是原有功能,可能正常使用,重构后,可能出现无法正常使用的问题,对用户体验感会非常不友好,往往就是,我以前能用啊,怎么现在不能用了!</p></li><li><p>对于新的需求推迟开发上线</p><p>重构的过程,我们先要需要保证原有功能不被影响,所以势必会导致对于新来的需求往后推迟,这也变相导致公司付出成本。</p></li><li><p>重复测试问题</p><p>系统重构后,不光是对未上线功能的测试,也要对原有功能进行再次测试,而且再次测试也可能存在测试不到位的风险。</p></li></ol><h2 id="系统重构的准备工作">系统重构的准备工作</h2><ol><li><p>足够了解原来的业务</p><p>在重构之前,我们不仅仅只是要了解业务,还要<strong>真正的完全理解业务</strong>,以及现有<strong>系统的业务规模</strong></p></li><li><p>对于技术的选型</p><p>对于技术要做预研,可能我们喜欢追求新技术,但是新技术未必全是最好的,所以说没有最好的技术,只有最合适的技术,作为架构师的我们一定要记住一点就是,<strong>技术永远为业务服务</strong></p></li><li><p>要做好基础的建设</p><p>在系统重构之前,先要做好基础服务的建设,开发规范以及开发手册的撰写,CI(持续集成)/CD(持续交付)环境的搭建,这是一名架构师要做到的。这里的基础建设可以不用很全,但是一定要有,我们对于系统架构,要遵循着<strong>约定优于配置</strong>的原则,约定好了,工作效率以及代码质量也会提高。<strong>基础建设是系统重构最关键的环节</strong></p></li></ol><h2 id="单体-All-in-one-还是微服务-Micro-Service">单体(All in one) 还是微服务(Micro Service)?</h2><p>现在,分布式微服务的概念深入程序员的心中,因为不管是面试,还是应用,牵扯到这个就会显得高大上,那我们在架构的时候,是不是需要建设分布式微服务的体系呢,答案是不一定的,假设你的用户群体只有几万,日活跃可能几千,你把阿里或者字节的架构搬到你的系统作为基础架构,一定就好用吗? 答案同样是不一定,可能最后还不如你系统原本架构好用,所以,<strong>只有适合的才是最好的架构</strong></p><blockquote><p>参考:沽泡Tom老师</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构师 </tag>
            
            <tag> 系统重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security的原理与探索</title>
      <link href="/posts/13835.html"/>
      <url>/posts/13835.html</url>
      
        <content type="html"><![CDATA[<h1>Spring Security 的原理与探索</h1><h3 id="简介">简介</h3><p>本文基于Spring Security 5.5.3版本,文章信息参考SpringSecurity官方文档与博主自身的理解与应用的结合,探索SpringSecurity原理思想 。</p><blockquote><p>官方文档地址 <a href="https://docs.spring.io/spring-security/reference/">https://docs.spring.io/spring-security/reference/</a></p></blockquote><p>本文主要讲解了SpringSecurity的实现思想,原理以及博主个人的一些见解,目的就是让大家对于Spring Security有一定的理解,以便未来更好的在实际当中去运用。</p><h2 id="Spring-Security的设计">Spring Security的设计</h2><p>SpringSecurity的整个设计思想大概是有一个顶级的管理器接口,给予一个特定的实现,由这个实现管理着多个实际操作,带着这个想法去看SpringSecurity的架构与源码,你会非常容易得理解。</p><p>Spring Security实现基于Servlet的Filter,所以要了解Spring Security 首先我们需要了解一下Servlet的Filter处理方式以及Spring如何做集成的,首先我们看一下一个HTTP处理的典型分层</p><h3 id="什么是过滤器">什么是过滤器?</h3><p>客户端向服务应用发送一个请求，容器会创建一个<code>FilterChain</code>(也就是过滤器链)包含了各个<code>Filter</code>,经过各个Filter以后,<code>Servlet</code>根据请求 URI 的路径处理<code>HttpServletRequest</code>并返回<code>HttpServletResponse</code></p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/Filter.png" alt="ServletFilter"></p><p>在Spring Mvc中 一个<code>DispatcherServlet</code>最多可以处理一个<code>HttpServletRequest</code>与一个<code>HttpServletResponse</code>,但是可以经过多个<code>Filter</code>,而<code>Filter</code>不仅可以阻止后续的调用,也可以修改后续使用的<code>HttpServletRequest</code>与<code>HttpServletResponse</code>。大白话的理解就是,用户的请求到你写的Controller之前,有多个过滤器可以对你的请求数据进行篡改或者校验。</p><h3 id="Spring整合Filter">Spring整合Filter</h3><p>在Servlet中,它允许使用自己的注册标准在交互过程中加入Filter,例如实现<code>javax.servlet.Filter</code>的方式,代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是它并不知道由Spring定义的Bean的方式,于是Spring根据Servelt的注册机制,提供了 <code>DelegatingFilterProxy</code>类,它可以将过滤工作委托给Servlet的过滤器,伪代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Lazily get Filter that was registered as a Spring Bean</span>    <span class="token comment">// For the example in DelegatingFilterProxy delegate is an instance of Bean Filter0</span>    <span class="token class-name">Filter</span> delegate <span class="token operator">=</span> <span class="token function">getFilterBean</span><span class="token punctuation">(</span>someBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// delegate work to the Spring Bean</span>    delegate<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此,原本的Servlet过滤链变为了</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/Filter2.png" alt="SpringFilter"></p><h3 id="Spring-Security的核心-SecurityFilterChain">Spring Security的核心-SecurityFilterChain</h3><p>在SpringSecurity中,<code>FilterChainProxy</code>代替了Spring原本的<code>DelegatingFilterProxy</code>它可以让你定义多个<code>SecurityFilterChain</code>,根据你指定的规则,来选择执行哪个过滤器链,当然,它的存在,也方便我们开发人员调试,当然,如果根据你的匹配规则,匹配到多个<code>SecurityFilterChain</code>,他只会调用第一个</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/FilterChainProxy.png" alt="Spring Security 过滤器链"></p><p>Spring Security本身的<code>SecurityFilterChain</code>根据<strong>排序</strong>的<strong>所有</strong>过滤器列表如下显示,方便大家以后根据自己的业务规则定义到某过滤器的前后,甚至替换。数据来源于官方文档。</p><ul><li>ChannelProcessingFilter</li><li>WebAsyncManagerIntegrationFilter</li><li>SecurityContextPersistenceFilter</li><li>HeaderWriterFilter</li><li>CorsFilter</li><li>CsrfFilter</li><li>LogoutFilter</li><li>OAuth2AuthorizationRequestRedirectFilter</li><li>Saml2WebSsoAuthenticationRequestFilter</li><li>X509AuthenticationFilter</li><li>AbstractPreAuthenticatedProcessingFilter</li><li>CasAuthenticationFilter</li><li>OAuth2LoginAuthenticationFilter</li><li>Saml2WebSsoAuthenticationFilter</li><li>UsernamePasswordAuthenticationFilter</li><li>OpenIDAuthenticationFilter</li><li>DefaultLoginPageGeneratingFilter</li><li>DefaultLogoutPageGeneratingFilter</li><li>ConcurrentSessionFilter</li><li>DigestAuthenticationFilter</li><li>BearerTokenAuthenticationFilter</li><li>BasicAuthenticationFilter</li><li>RequestCacheAwareFilter</li><li>SecurityContextHolderAwareRequestFilter</li><li>JaasApiIntegrationFilter</li><li>RememberMeAuthenticationFilter</li><li>AnonymousAuthenticationFilter</li><li>OAuth2AuthorizationCodeGrantFilter</li><li>SessionManagementFilter</li><li>ExceptionTranslationFilter</li><li>FilterSecurityInterceptor</li><li>SwitchUserFilter</li></ul><h2 id="认证与授权">认证与授权</h2><h3 id="大白话理解认证与授权">大白话理解认证与授权</h3><ul><li><p>认证:告诉我你是谁。认证的过程就是解决,你是谁的问题</p></li><li><p>授权:    告诉你,你来我这里只能干什么。授权的过程就是解决,你能做什么的问题</p></li></ul><h2 id="认证">认证</h2><p>Spring Security默认支持的认证机制有很多,包括以下几种方式(数据来源于官方文档)</p><blockquote><ul><li>用户名和密码- 如何使用用户名/密码进行身份验证</li><li>OAuth 2.0 登录- 使用 OpenID Connect 和非标准 OAuth 2.0 登录（QQ快捷登录等）的 OAuth 2.0 登录</li><li>SAML 2.0 登录- SAML 2.0 登录</li><li>中央认证服务器 (CAS) - 中央认证服务器 (CAS) 支持</li><li>记住我- 如何记住用户过去的会话过期</li><li>JAAS 身份验证- 使用 JAAS 进行身份验证</li><li>OpenID - OpenID 身份验证</li><li>预身份验证方案- 使用外部机制(既你自己的原本方式)进行身份验证，但仍使用 Spring Security 进行授权和防止常见漏洞利用。</li><li>X509 认证- X509 认证</li></ul></blockquote><p>知道了SpringSecurity的认证机制,如何去使用以及配置,这就需要去了解Spring Security 架构的组件,而Spring Security的架构组件,则主要包括了以下组件:</p><ul><li><a href="#AuthenticationManager%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86%E5%99%A8">AuthenticationManager</a> -认证管理器:定义Spring Security的各种身份认证如何去执行验证的顶层接口</li><li><a href="#ProviderManager%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E6%96%B9%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%99%A8">ProviderManager</a> - 认证提供方管理器:提供认证的所有提供方的管理器,它是AuthenticationManager的实现,</li><li><a href="#AuthenticationProvider%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E6%96%B9">AuthenticationProvider</a> - 用于ProviderManager被管理的具体认证方式,典型的为<code>DaoAuthenticationProvider</code>,既用户名密码模式</li><li><a href="#AbstractAuthenticationProcessingFilter%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E8%BF%87%E6%BB%A4%E5%99%A8">AbstractAuthenticationProcessingFilter</a> - 身份验证的基础流程过滤器。他是一个抽象方法,保证身份验证流程以及各个部分如何高效的协同工作,最典型的抽象实现类为<code>UsernamePasswordAuthenticationFilter</code></li><li><a href="#AuthenticationEntryPoint%E8%AE%A4%E8%AF%81%E5%85%A5%E5%8F%A3%E7%82%B9">AuthenticationEntryPoint</a> - 认证入口点: 常用于在认证成功或者失败时定义相应状态与头信息(例如认证失败重定向页面,认证失败返回401代码等)</li><li><a href="#Authentication%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF">Authentication</a> - 认证信息: 已通过认证的认证信息以及凭证信息,通常存放的是用户名权限等常用信息</li><li><a href="#GrantedAuthority%E6%8B%A5%E6%9C%89%E7%9A%84%E6%9D%83%E9%99%90">GrantedAuthority</a> - 授予权限: 授予主体Authentication所携带的认证信息相应的权限,可以理解为你有个User实体类,这个实体类包含了一个List<Role>的数据,User就是Authentication,List<Role>就是GrantedAuthority</li><li>[SecurityContextHolder](#SecurityContextHolder 安全上下文的持有类) -  安全上下文的持有类:Spring Security 存储身份验证信息的地方,既存放的SecurityContextHolder的相关信息。</li><li><a href="#SecurityContext%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87">SecurityContext</a> - 安全上下文:可以从当前经过身份验证的用户中获取用户的Authentication信息。</li></ul><p>现在我们开始根据SpringSecurity的认证流程看看上面的架构组件是如何整合在一起的</p><h3 id="Authentication认证信息">Authentication认证信息</h3><p>认证信息,为SpringSecurity在认证中的基础接口,也是核心接口,它定义了认证信息所需要的信息,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Authentication</span> <span class="token keyword">extends</span> <span class="token class-name">Principal</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getPrincipal():举例在用户名密码模式当中,指用户名信息</li><li>getCredentials():举例在用户名密码模式当中,指密码信息</li><li>getDetails(); 举例在用户名密码模式当中,指<code>UserDetails</code>,它包含了用户的一些基本信息,类似于我们平常对应user表的类</li><li>getAuthorities();当前认证用户的权限集合</li><li>isAuthenticated();是否认证成功</li></ul><p>它在SpringSecurity认证流转过程当中存在两种状态:</p><ul><li>用户输入的凭证信息,由AuthenticationManager管理期间,此时<code>isAuthenticated()</code>为false</li><li>已经经过身份认证的用户信息,它存在于SecurityContext,此时<code>isAuthenticated()</code>应为true</li></ul><h3 id="GrantedAuthority拥有的权限">GrantedAuthority拥有的权限</h3><p>根据SpringSecurity官方定义:</p><blockquote><p>GrantedAuthoritys can be obtained from the Authentication.getAuthorities() method. This method provides a Collection of GrantedAuthority objects. A GrantedAuthority is, not surprisingly, an authority that is granted to the principal. Such authorities are usually “roles”, such as ROLE_ADMINISTRATOR or ROLE_HR_SUPERVISOR. These roles are later on configured for web authorization, method authorization and domain object authorization.</p></blockquote><p>通俗点说,就是根据业务系统需求,来定义用户权限或者角色的地方,它可以通过Authentication中的getAuthorities()来获取</p><h3 id="SecurityContextHolder-安全上下文的持有类">SecurityContextHolder 安全上下文的持有类</h3><p>它是SpringSecurity中核心,是存储着已认证用户详细信息的地方,在SpringSecurity认证过程当中,它并不关心<code>SecurityContextHolder</code>中的用户信息数据是如何产生的,只要把相应认证信息填充,SpringSecurity就认为它是经过认证的用户</p><p>举例说明,如果我们使用自己原本的授权模型,而不去添加过滤链,我们可以这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password123456"</span><span class="token punctuation">,</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样,我们就得到了一个已认证的用户信息,如果我们在实际业务当中获取当前用户信息,我们就可以这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//登录认证的用户名</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//权限集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以随时在我们的业务中获取定义的用户信息</p><h3 id="SecurityContext安全上下文">SecurityContext安全上下文</h3><p>它是SpringSecurity的一个顶层接口,比较像我们平时使用的实体类,作用就是得到,或者加入一个认证信息,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContext</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>存入到<code>SecurityContext</code>中的<code>Authentication</code>为认证成功数据。</p><p>上面四个是SpringSecurity基础核心,他们存在与整个认证授权期间的各个节点,现在,我们正式的去认知一下SpringSecurity的认证是如何做的,首先我们去看一下整个流程涉及到的一个关键<code>AuthenticationManager</code></p><h3 id="AuthenticationManager认证管理器">AuthenticationManager认证管理器</h3><p>引用SpringSecurity官方文档的解释是</p><blockquote><p>AuthenticationManager is the API that defines how Spring Security’s Filters perform authentication.</p></blockquote><p>意思就是,认证管理器是SpringSecurity如何去执行身份认证的Api 。AuthenticationManager的源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationManager</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>AuthenticationManager属于顶层接口,它提供一个接口方法,用于身份校验,并返回一个校验后的认证信息,至于校验的规则,他留给了子类去实现,在Spring给予的实现中我们经常接触的就是ProviderManager</p><h3 id="ProviderManager认证提供方统一管理器">ProviderManager认证提供方统一管理器</h3><p>同样引用官网解释</p><blockquote><p>ProviderManager delegates to a List of AuthenticationProviders. Each AuthenticationProvider has an opportunity to indicate that authentication should be successful, fail, or indicate it cannot make a decision and allow a downstream AuthenticationProvider to decide.</p></blockquote><p>可以解释为:认证提供方同一管理器管理着多个AuthenticationProvider(具体认证提供方),每个Provider都可以表明他是认证成功,失败,或者它无法确定是否验证成功,交给其他AuthenticationProvider处理,老常例,看源码,源码是最好的老师。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderManager</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationManager</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Authentication</span><span class="token punctuation">></span></span> toTest <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">/** 循环遍历所有管理的provider */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationProvider</span> provider <span class="token operator">:</span> <span class="token function">getProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>toTest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">/** 尝试去认证 */</span>result <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">copyDetails</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccountStatusException</span> <span class="token operator">|</span> <span class="token class-name">InternalAuthenticationServiceException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">prepareException</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>lastException <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eraseCredentialsAfterAuthentication <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">/** 清除敏感信息 */</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">throw</span> lastException<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只保留了核心方法<code>authenticate()</code>,由源码可以知道他做了以下步骤:</p><ul><li>循环遍历所有管理的Provider,并且判定当前Provier是否支持当前类型的<code>Authentication</code>的认证</li><li>如果当前Provider支持该类型,则尝试去认证</li><li>如果抛出<code>AccountStatusException</code>账户状态异常或<code>InternalAuthenticationServiceException</code>服务器内部异常,则直接抛出异常,认证失败</li><li>如果抛出<code>AuthenticationException</code>,则记录当前异常继续循环,看看是否有其他provider支持其认证</li><li>如果正常返回<code>Authentication</code>,则认证成功,清除掉<code>Authentication</code>当中的<code>credentials</code>信息,因为它通常是我们的密码,然后返回给<strong>认证流程引擎</strong>(下文会说)</li></ul><p>由上文中,我们有引申出来两个概念,既provider跟认证流程引擎,接下来一起看下<code>AuthenticationProvider</code></p><h3 id="AuthenticationProvider认证提供方">AuthenticationProvider认证提供方</h3><p>认证提供方就是身份验证的具体操作,它依旧是有一个顶层接口,由子类去实现,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationProvider</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它一共定义了两个接口方法,一个是<code>authenticate</code>的认证接口方法,一个是<code>support</code>可支持的类型的判定方法,在<code>authenticate</code>方法中,你会发现传入与返回都是<code>Authentication</code>,他们最大的区别是传入参数的<code>authentication</code>是未认证的,它的<code>isAuthenticated()</code>是false,而返回的<code>Authentication</code>则是已认证的,<code>isAuthenticated()</code>返回为true。</p><p>SpringSecurity对<code>AuthenticationProvider</code>的实现很多,比较常见实现类为<code>DaoAuthenticationProvider</code> 既用户名密码认证,以及<code>JwtAuthenticationProvider</code> JWT令牌验证。</p><h3 id="AuthenticationEntryPoint认证入口点">AuthenticationEntryPoint认证入口点</h3><p>它在SpringSecurity的官方文档中,是这样描述的</p><blockquote><p>Sometimes a client will proactively include credentials such as a username/password to request a resource. In these cases, Spring Security does not need to provide an HTTP response that requests credentials from the client since they are already <a href="http://included.In">included.In</a> other cases, a client will make an unauthenticated request to a resource that they are not authorized to access. In this case, an implementation of <code>AuthenticationEntryPoint</code> is used to request credentials from the client.</p></blockquote><p>大致的意思就是,如果请求携带了凭证信息(既用户名密码或者token) SpringSecurity不需要去提供对应请求的响应。但是在其他越权访问时,会通过实现<code>AuthenticationEntryPoint</code>的方式,来重定向等响应.</p><p>大家看了官网的解释,有没有觉得他确实是入口,但是不是很抽象呢,其实我更想说它是越权访问的处理类,这样是不是更形象呢?</p><p>他的源码只有一个接口定义方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由子类去实现越权访问后的信息。</p><p>这样,我们的认证管理器也了解了,现在正是通过流程核心<code>AbstractAuthenticationProcessingFilter</code>将所有认证过程串联起来</p><h3 id="AbstractAuthenticationProcessingFilter认证流程引擎过滤器">AbstractAuthenticationProcessingFilter认证流程引擎过滤器</h3><p><code>AbstractAuthenticationProcessingFilter</code>是各种认证流程的父类,它封装了基本认证流程中的通用环节,核心处理由子类去实现,关键源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAuthenticationProcessingFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span><span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceAware</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/** 认证管理器 */</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token comment">/** 认证成功后的处理器 */</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedRequestAwareAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 认证失败后的处理器 */</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> failureHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requiresAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> authenticationResult <span class="token operator">=</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">successfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> authenticationResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> failed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** 判断是否需要身份认证 */</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">requiresAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/** 开始认证,由子类去实现 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token comment">/** 认证成功处理逻辑 */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">successfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span><span class="token class-name">Authentication</span> authResult<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>successHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> authResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** 认证失败处理逻辑 */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>failureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文中我只保留了关键的代码,由源码我们可以知道<code>AbstractAuthenticationProcessingFilter</code>过滤流程为:</p><ul><li>判断当前request是否需要认证,如果不需要,则放行</li><li>由子类去实现认证逻辑并尝试去认证,如果认证成功则返回<code>Authentication</code></li><li>如果认证结果成功返回<code>Authentication</code>则将认证信息放入<code>SecurityContext</code>当中并调用<code>AuthenticationSuccessHandler</code>中的<code>onAuthenticationSuccess()</code>方法</li><li>如果认证抛出<code>InternalAuthenticationServiceException</code>或<code>AuthenticationException</code>异常,则清空<code>SecurityContextHolder</code>上下文信息,并调用<code>AuthenticationFailureHandler</code>中的<code>onAuthenticationFailure()</code>方法</li></ul><p>从上文中,我们知道了认证的整体流程,但是认证过程中的关键调用<code>attemptAuthentication()</code> 它的细节我们并不知道,本文就以它的子类<code>UsernamePasswordAuthenticationFilter</code>用户名密码模式来分析下它的具体流程,下面就以<code>UsernamePasswordAuthenticationFilter</code>举例:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/authentication.png" alt="认证流程"></p><p>上面图中,我们知道了流程,实现方式,我们再结合源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>postOnly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"Authentication method not supported: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    username <span class="token operator">=</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> username <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    password <span class="token operator">=</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> password <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Allow subclasses to set the "details" property</span>    <span class="token function">setDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由源码可知:</p><ol><li>当用户提交认证信息凭证时<code>UsernamePasswordAuthenticationFilter</code>中根据request信息调用<code>attemptAuthentication()</code>方法创建<code>UsernamePasswordAuthenticationToken</code>从而获得一个<code>Authentication</code>对象,<code>UsernamePasswordAuthenticationToken</code>即为<code>Authentication</code>的一个具体实现</li><li>将<code>Authentication</code>传递给<code>AuthenticationManager</code>进行身份认证</li><li>认证成功,则返回<code>Authentication</code>,认证失败,则参考 <a href="#ProviderManager%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E6%96%B9%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%99%A8">ProviderManager</a></li></ol><p>这样,我们就把整个认证过程都串联起来了。</p><h2 id="权限">权限</h2><p>从上文中,我们已经了解到了SpringSecurity强大的认证功能,已经强大的可拓展性,现在,我们了解下SpringSecurity的授权机制。授权的过程,你会发现与认证流程有着惊人的相似点。</p><p>在SpringSecurity的授权过程当中,同样有一个过滤链,而这个过滤链的抽象父类就是<code>AbstractSecurityInterceptor</code></p><h3 id="AbstractSecurityInterceptor权限过滤链拦截的抽象类">AbstractSecurityInterceptor权限过滤链拦截的抽象类</h3><p>我们先根据源码看看<code>AbstractSecurityInterceptor</code>重点做了哪些事情</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSecurityInterceptor</span>        <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">,</span> <span class="token class-name">MessageSourceAware</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 校验受保护对象所需要的权限是否可被支持 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validateAttributeDefs</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributeDefs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 在受保护对象被调用之前的操作 */</span>    <span class="token keyword">protected</span> <span class="token class-name">InterceptorStatusToken</span> <span class="token function">beforeInvocation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 尝试执行授权操作 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptAuthorization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">,</span>                                      <span class="token class-name">Authentication</span> authenticated<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 调用结束后的相关清理工作 */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finallyInvocation</span><span class="token punctuation">(</span><span class="token class-name">InterceptorStatusToken</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/** 在受保护对象被调用之后的操作 */</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">afterInvocation</span><span class="token punctuation">(</span><span class="token class-name">InterceptorStatusToken</span> token<span class="token punctuation">,</span> <span class="token class-name">Object</span> returnedObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringSecurity的权限主要分为方法调用前,以及方法调用后,拦截的方案分别由两个管理器管理,他们是:</p><ul><li>方法调用前的: <a href="#AccessDecisionManager%E8%AE%BF%E9%97%AE%E5%86%B3%E7%AD%96%E7%AE%A1%E7%90%86%E5%99%A8">AccessDecisionManager</a>-访问决策管理器</li><li>方法调用后的: <a href="#AfterInvocationManager%E8%B0%83%E7%94%A8%E5%90%8E%E7%BD%AE%E7%AE%A1%E7%90%86%E5%99%A8">AfterInvocationManager</a>-调用后置管理器</li></ul><p>这里额外说明一下<code>Collection&lt;ConfigAttribute&gt; attributes</code>,这里指的是受保护对象需要被访问时所需要的权限集合,这个属性在后续操作中多次被用到。</p><p>对于<code>AbstractSecurityInterceptor</code>抽象实现,SpringSecurity对于此抽象的实现一共有3个:</p><ul><li>FilterSecurityInterceptor 过滤器拦截方式-通过实现Filter的方式进行验证</li><li>MethodSecurityInterceptor 方法拦截-通过实现Spring方法拦截的接口MethodInterceptor进行验证</li><li>AspectJMethodSecurityInterceptor 切面拦截,继承MethodSecurityInterceptor,使其通过aop的方式进行拓展实现</li></ul><h3 id="FilterSecurityInterceptor过滤器权限拦截">FilterSecurityInterceptor过滤器权限拦截</h3><p>我们根据官方提供的图,看看<code>FilterSecurityInterceptor</code>做了哪些事情</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/filtersecurityinterceptor.png" alt="权限过滤流程实例"></p><p>现在我们来看看验证权限的流程,我们就按照FilterSecurityIntercepter的流程走:</p><ol><li><code>FilterSecurityInterceptor</code>通过SecurityContextHolder得到认证的<code>Authentication</code>信息</li><li><code>FilterSecurityInterceptor</code>在<code>doFilter()</code>方法中,根据<code>HttpServletRequest</code>,<code>HttpServletResponse</code>,<code>FilterChain</code>创建<code>FilterInvocation</code>对象</li><li>通过执行父类的<code>beforeInvocation()</code>方法从<code>SecurityMetadataSource</code>中获取被保护对象所需要的权限</li><li>接着将<code>FilterInvocation</code>,<code>Authentication</code>跟<code>ConfigAttributes</code>三个参数调用<code>attemptAuthorization()</code>方法,交给<code>AccessDecisionManager</code>去执行。</li><li>如果授权失败,则抛出<code>AccessDeiedException</code>异常</li><li>如果授权成功,则正常处理request请求</li></ol><p>由上述流程可知,主要判断是否授权成功与否的决策器是<code>AccessDecisionManager</code>,受保护对象的所需权限,由<code>SecurityMetadataSource</code>整理并返回,而认证的权限来源则我们需要先再回顾一下<code>GrantedAuthority</code>,它代表着当前用户所拥有的权限列表,它是用<code>AuthenticationManager</code>认证后,设置到<code>Authentication</code>里面的,它的方法在源码中只有一个,如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GrantedAuthority</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的返回值为String类型,意味着你必须提供一个精准的字符串作为权限信息,使其能够被权限的管理器<code>AccessDecisionManager</code> 精准的判定。</p><p>SpringSecurity对于<code>AccessDecisionManager</code>实现,使用了投票机制的方式,如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/access-decision-voting.png" alt="投票机制"></p><p>整体思路就是,由实现<code>AccessDecisionVoter</code>的各个投票器进行投票,由<code>AccessDecisionManager</code>对投票结果进行处理,判定用户是否授权通过。现在我们对于<code>AccessDecisionManager</code>跟<code>AccessDecisionVoter</code>进行详细介绍</p><h2 id="AccessDecisionManager访问决策管理器">AccessDecisionManager访问决策管理器</h2><p><code>AccessDecisionManager</code>是由<code>AbstractSecurityInterceptor</code>(这是验权过程当中的一个过滤链的父类抽象,后文会详细介绍) 调用的，它负责鉴定用户是否有访问对应资源（方法或URL）的权限,源码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**     * 通过传递的参数来决定用户是否有访问对应受保护对象的权限     *     * @param authentication 当前正在请求受包含对象的Authentication     * @param object 受保护对象，其可以是一个MethodInvocation。     * @param configAttributes 与正在请求的受保护对象相关联的配置属性     */</span><span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientAuthenticationException</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>decide()方法有三个参数,已在注释当中对其进行说明,作用就是,<code>authentication</code>的权限信息,是否符合<code>object</code>受保护对象要求的<code>configAttributes</code>,简单的例子就是访问<strong>删除用户</strong>方法需要<code>admin</code>权限,此时<strong>用户张三</strong>需要访问这个方法,张三的<code>authentication</code>里的权限信息,是否存在<strong>删除用户</strong>方法所需要的<code>admin</code>角色。</li><li>support方法有两个,第一个则代表的是当前的<code>AccessDecisionManager</code>是否支持并且能够处理对应的configAttributes,第二个则是受保护的对象类型是否支持</li></ul><p>由图可以,Spring官方提供了三种不同的决策器,分别是<code>AffirmativeBased</code>、<code>ConsensusBased</code>和<code>UnanimousBased</code>,统一继承自抽象父类<code>AccessDecisionManager</code>,现在我们看一下三种决策器的源码,去分析出他们是如何决策的。</p><h3 id="投票决策器-AffirmativeBased">投票决策器-AffirmativeBased</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AffirmativeBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">AffirmativeBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> deny <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> configAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span>deny<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deny <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码,我们可以看到,只有当<code>deny &gt; 0</code>的时候,才会抛出异常,但是大于0的情况只会出现在第二个<code>case</code>的情况,由此我们可以得出的结论是:</p><ul><li>如果有一票是赞成票,则授权通过</li><li>如果没有一票是赞成票,但是有投反对票的,则抛出<code>AccessDeniedException</code>异常,授权不通过</li><li>如果没有赞成票,也没有反对票,则授权通过</li></ul><h3 id="投票决策器-ConsensusBased">投票决策器-ConsensusBased</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsensusBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> allowIfEqualGrantedDeniedDecisions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ConsensusBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> grant <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> deny <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> configAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span>grant<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span>deny<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grant <span class="token operator">></span> deny<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deny <span class="token operator">></span> grant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>grant <span class="token operator">==</span> deny<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>grant <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowIfEqualGrantedDeniedDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAllowIfEqualGrantedDeniedDecisions</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions <span class="token operator">=</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>废话不多说,直接看哪个地方抛出了<code>AccessDeniedException</code>,通过源码我们可以看到<code>deny</code>为反对票,<code>grant</code>为赞成票,当<code>deny &gt; grant</code>的时候会驳回,以及<code>grant</code>等于<code>deny</code>并且<code>grant</code>不为0的情况下,根据系统设置判定是否驳回。由此我们可以得出结论:</p><ul><li>如果赞成票多于反对票,则授权通过</li><li>如果反对票多于赞成票,则授权失败</li><li>如果赞成票等于反对票,并且赞成票不等于0,视系统设置而定,如果参数<code>allowIfEqualGrantedDeniedDecisions</code>为true则授权通过,反之则授权失败,<code>allowIfEqualGrantedDeniedDecisions</code>默认为true</li><li>如果全部弃票,则视父类抽象<code>AbstractAccessDecisionManager</code>中的<code>allowIfAllAbstainDecisions</code>值来定,如果参数<code>allowIfAllAbstainDecisions</code>为true则授权通过,反之则授权失败,<code>allowIfEqualGrantedDeniedDecisions</code>默认为false</li></ul><h3 id="投票决策器-UnanimousBased">投票决策器-UnanimousBased</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnanimousBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">UnanimousBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> grant <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> singleAttributeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleAttributeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>singleAttributeList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> singleAttributeList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span>grant<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, there were no deny votes</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grant <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据源码,我们可知道,<code>UnanimousBased</code>是根据属性以及其他投票器的投票结果,来确定是否通过的,而源码中的驳回只有在第二个case种出现,它是在其他投票器中被抉择为fasle的,而且<code>UnanimousBased</code>不同于其他两个投票器,其他两个投票器都是对所有属性一次性整理得出结论,而<code>UnanimousBased</code>是对属性一个个进行抉择,所以在全部验证属性整理可能通过时,逐个判断就不一定了。由此我们可以得出以下结论:</p><ul><li>当所有属性在其他决策器没有反对票,但是有赞成票时,则授权通过</li><li>当其他决策器对某一属性出现反对票时,则授权失败</li><li>当全部弃票时,则视父类抽象<code>AbstractAccessDecisionManager</code>中的<code>allowIfAllAbstainDecisions</code>值来定,如果参数<code>allowIfAllAbstainDecisions</code>为true则授权通过,反之则授权失败,<code>allowIfEqualGrantedDeniedDecisions</code>默认为false</li></ul><h2 id="投票方式的实现-AccessDecisionVoter">投票方式的实现-AccessDecisionVoter</h2><p>决策器介绍完了,那投票器是如何投票的呢? 这种方式就是对所有的<code>AccessDecisionVoter</code>的实现的Voter,轮询进行决策,最终由<code>AccessDecisionManager</code>得出投票结果,判定是否有权限访问受保护的资源。我们先来看下<code>AccessDecisionVoter</code>接口都需要我们做什么</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionVoter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 同意 */</span><span class="token keyword">int</span> ACCESS_GRANTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/** 弃权 */</span><span class="token keyword">int</span> ACCESS_ABSTAIN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/** 驳回 */</span><span class="token keyword">int</span> ACCESS_DENIED <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">S</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他与决策器的方法比较相似</p><ul><li>vote()方法依然后有三个参数,authentication<code>的权限信息,是否符合</code>object<code>受保护对象要求的</code>configAttributes</li><li>support方法依然有两个,第一个则代表的是当前的<code>AccessDecisionVoter</code>是否支持并且能够处理对应的configAttributes,第二个则是受保护的对象类型是否支持</li></ul><p>不同的是 vote()方法,有了返回值,他的返回类型为int,而返回的数值则为上面已经备注了的<code>ACCESS_GRANTED</code>(同意),<code>ACCESS_ABSTAIN</code>(弃权)以及<code>ACCESS_DENIED</code>(驳回)。</p><p>SpringSecurity官方内置的投票器有两个,分别为<code>RoleVoter</code>与<code>AuthenticatedVoter</code></p><h3 id="RoleVoter角色投票器">RoleVoter角色投票器</h3><p>用法如其名,它会将传入的ConfigAttribute认为是一个角色的名称,它的支持标准在源码中如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> rolePrefix <span class="token operator">=</span> <span class="token string">"ROLE_"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token function">getRolePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果ConfigAttribute不为空,并且为指定前缀,则使用<code>RoleVoter</code>进行投票,源码中的默认前缀为<code>ROLE_</code>,开发过程中,你可通过自定义前缀</p><p>我们再看一下它的投票代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ACCESS_DENIED<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> ACCESS_ABSTAIN<span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> <span class="token function">extractAuthorities</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> ACCESS_DENIED<span class="token punctuation">;</span>            <span class="token comment">// Attempt to find a matching granted authority</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span> authority <span class="token operator">:</span> authorities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>authority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据源代码,我们可以得出如下结论:</p><ul><li>如果认证信息为空,则投反对票</li><li>如果权限所需要的角色在认证的角色中存在,则投赞成票</li><li>如果权限中的角色存在已指定前缀开头(如<code>ROLE_</code>),但是没有一个角色能匹配上所需角色,则投反对票</li><li>如果权限中的角色没有已指定前缀开头(如<code>ROLE</code>),则投弃权票</li></ul><h3 id="AuthenticatedVoter认证投票器">AuthenticatedVoter认证投票器</h3><p>它是对于认证来源来判定的投票器,源代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_AUTHENTICATED_FULLY <span class="token operator">=</span> <span class="token string">"IS_AUTHENTICATED_FULLY"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_AUTHENTICATED_REMEMBERED <span class="token operator">=</span> <span class="token string">"IS_AUTHENTICATED_REMEMBERED"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_AUTHENTICATED_ANONYMOUSLY <span class="token operator">=</span> <span class="token string">"IS_AUTHENTICATED_ANONYMOUSLY"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_FULLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                  <span class="token operator">||</span> IS_AUTHENTICATED_REMEMBERED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                  <span class="token operator">||</span> IS_AUTHENTICATED_ANONYMOUSLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,有且仅支持ConfigAttribute是<code>IS_AUTHENTICATED_FULLY</code>,<code>IS_AUTHENTICATED_REMEMBERED</code>,<code>IS_AUTHENTICATED_ANONYMOUSLY</code>这三种情况</p><ul><li>IS_AUTHENTICATED_FULLY: 完全的权限认证,这种方式往往是通过正常登录(用户名密码登录,Token等)来的</li><li>IS_AUTHENTICATED_REMEMBERED: 记住我的方式,这种方式是通过<strong>记住我</strong>功能实现的认证</li><li>IS_AUTHENTICATED_ANONYMOUSLY: 匿名方式,既未认证的用户。</li></ul><p>我们再来看一下它的vote投票方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> ACCESS_ABSTAIN<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> ACCESS_DENIED<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_FULLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFullyAuthenticated</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_REMEMBERED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isRememberMe</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token function">isFullyAuthenticated</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_AUTHENTICATED_ANONYMOUSLY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isAnonymous</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token function">isFullyAuthenticated</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isRememberMe</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> ACCESS_GRANTED<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源代码解析,我们可以知道,投票器默认是弃权票,当所需属性是上述三种时,开始进行判断,顺便一提源码中对上述三种情况的判定方法分别是<code>isFullyAuthenticated(authentication)</code>,<code>isRememberMe(authentication)</code>,<code>isAnonymous(authentication)</code> 其中<code>isRememberMe(authentication)</code>与<code>isAnonymous(authentication)</code>调用的是<code>AuthenticationTrustResolver</code>中的方法,判定方式是通过判断<code>authentication</code>的类型是不是<code>RememberMeAuthenticationToken.class</code>或者<code>AnonymousAuthenticationToken.class</code>,而<code>isFullyAuthenticated(authentication)</code>则是判断<code>authentication</code>是不是<code>isAnonymous(authentication)</code> 跟<code>isRememberMe(authentication)</code>,如果两个均不是则是完全认证。根据源代码的流程,我们可以得出以下结论:</p><ul><li>当受保护资源不属于上述三证类型判断时,则投弃权票</li><li>当受保护资源为完全认证,认证权限类型是完全认证时则投赞成票,否则投反对票</li><li>当受保护资源为记住我时,认证权限是完全认证或者记住我时,则投赞成票,否则投反对票</li><li>当受保护资源为匿名认证时,则认证权限只要是三种类型的任意一种,则投赞成票,否则投反对票</li></ul><h3 id="小结">小结</h3><p>综上,我们知道了SpringSecurity默认的两种投票器,当然,如果这两种投票器无法满足的你需求,你完全可以自定义投票器加入到其中,根据自己的业务规则制定投票结果。</p><h2 id="AfterInvocationManager调用后置管理器">AfterInvocationManager调用后置管理器</h2><p>如果业务中需要对调用后的数据校验或统一操作,你可以去使用它,他提供了一个很方便的钩子方法,你可以根据实际需求去过滤修改返回的数据,通常用于数据权限。</p><p>后置管理器跟SpringSecurity其他解决方案的思想基本一致,由一个<code>AfterInvocationManager</code>作为顶层管理器设计类,源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AfterInvocationManager</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">,</span><span class="token class-name">Object</span> returnedObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用后置管理器跟<code>AccessDecisionManager</code>访问决策管理器比较像,区别就在于访问决策器无返回值,它返回一个处理后的返回对象,相应的传入参数多了一个返回对象,SpringSecurity对于它的唯一实现是<code>AfterInvocationProviderManager</code>类,它管理者所有<code>AfterInvocationProvider</code>返回处理类,SpringSecurity对于<code>AfterInvocationProvider</code>的默认实现为<code>PostInvocationAdviceProvider</code>,具体实现的操作就是根据我们自己的配置,来执行,如果不能满足,我们可自行实现<code>AfterInvocationProvider</code>。</p><p>就此,我们把SpringSecurity的整个认证与鉴权的代码与原理梳理完了,本文主要讲解原理,具体实际应用,我会单独再写一篇博文,希望本文对大家有所帮助跟启发,谢谢大家!</p>]]></content>
      
      
      <categories>
          
          <category> 认证与授权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
            <tag> 认证与授权 </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的探索</title>
      <link href="/posts/56241.html"/>
      <url>/posts/56241.html</url>
      
        <content type="html"><![CDATA[<h1>并发编程的探索</h1><h2 id="简介">简介</h2><p>顾名思义,并发就是指当前的系统,能够同时承载的访问数量。通常会细定义为TPS与QPS</p><ul><li>TPS(Transaction Processing Systems): 每秒事务处理数量</li><li>QPS(Query Processing Systems) : 每秒查询处理数量</li></ul><p>当然,互联网上对于TPS与QPS还有更细化的解释:</p><blockquote><p>Tps即每秒处理事务数，包括了<br>1、用户请求服务器<br>2、服务器自己的内部查询等处理<br>3、服务器返回给用户<br>这三个过程，每秒能够完成N个这三个过程，Tps也就是N；</p><p>QPS基本类似于TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入QPS之中。每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准<br>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。<br>如果是对一个接口（单场景）压测，且这个接口内部不会再去请求其它接口，那么TPS等于QPS，否则，TPS不等于QPS</p></blockquote><h2 id="需求">需求</h2><h3 id="硬件需求">硬件需求</h3><p>一个系统能支持多少的并发量,除了本身软件的架构设计以及代码外,最重要的还是硬件的支撑,而硬件就是我们所熟知的现今计算机基本组成,即硬盘、内存、CPU、网卡以及通讯提供商给予的宽带种类、速率。当硬件达到瓶颈时我们也可以横向扩展,就是我们所说的集群。</p><h3 id="软件需求">软件需求</h3><p>软件需求依托于硬件,再多的优化也只能在当前硬件的极限环境内波动,不可能超过硬件的承受范围,这个承受范围的衡量标准,就是<strong>RT(Response Time)</strong> 响应时间。软件方面的优化思路,就是要充分利用好硬件,<strong>多线程</strong>的异步执行,就是充分利用硬件提高并发方式的其中之一。</p><h2 id="线程与进程">线程与进程</h2><p>一个<strong>进程</strong>可以创建多个线程,而<strong>线程</strong>是操作系统进行运算和调度的最小单元,多个线程可以并行执行,而并行执行的数量,原来线程的数量由CPU的核心数决定,但是Intel的超线程技术出来后,这个概念就不再固定,变成了跟CPU线程数决定,也就是我们通常买CPU时所听说的8核16线程。</p><h2 id="并发与并行">并发与并行</h2><ul><li><strong>并行</strong> 并行由CPU的核心数或者线程数决定,意味着可以同时执行的任务数量</li><li><strong>并发</strong> 并发则是只同一时间段内在多个线程内同时执行的数量。由于并行数量的限制,CPU则会通过<strong>时间片切换</strong>的方式来同时执行这些超过本身并行数量的任务。</li></ul><h2 id="时间片轮转调度">时间片轮转调度</h2><p>时间片轮转调度,就是我们经常说的时间片切换,引用百度百科含义就是</p><blockquote><p>​时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。</p><p>时间片轮转调度中唯一有趣的一点是时间片的长度。从一个进程切换到另一个进程是需要一定时间的–保存和装入寄存器值及内存映像，更新各种表格和队列等。</p></blockquote><p>时间片在没有干预的情况下,每段时间片执行时长都是固定的,进程的切换需要耗费较大的资源,而线程的切换只需保存少量寄存器的内容,但是即使这样,时间片的切换依旧需要耗费少量时间,这是不可避免地。</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211031214638502.png" alt="时间片切换" title="时间片切换"></p><h2 id="创建线程">创建线程</h2><p>博主是一名默默无闻的Java程序员,故以Java代码举例创建线程的其中三种方式</p><h3 id="继承Thread类">继承Thread类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程启动了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadMethod1</span> threadMethod1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadMethod1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,run方法为具体执行的逻辑,而start则为启动线程</p><h3 id="实现Runnable接口">实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程-实现Runnable接口方式运行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,实现Runnable接口的方式仍然需要Thread类中的start方法去启动并且这两类创建方式均没有返回值,场景用于无需关心执行结果的场景。</p><h3 id="实现Callable接口">实现Callable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"当前线程执行成功,这个是返回结果"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadMethod3</span> threadMethod3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>threadMethod3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Callable接口提供了一个带返回值的call方法,返回类型由实现Callable的泛型决定,并用FutureTask类来获取未来任务的结果。</p><h2 id="线程的生命周期">线程的生命周期</h2><p>本文已Java语言距离,在Java中,线程一共有6种状态</p><ul><li>New新生</li><li>Runnable       运行</li><li>Blocked          阻塞</li><li>Waiting           等待</li><li>TimedWaiting  超时等待</li><li>Terminated     结束</li></ul><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/concurent.png" alt="线程的生命周期示意图" title="线程的生命周期示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 时间片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/posts/20533.html"/>
      <url>/posts/20533.html</url>
      
        <content type="html"><![CDATA[<h1>代码优雅之路-设计模式之工厂模式</h1><h2 id="概述">概述</h2><p>现实中的工厂,就是造东西的,那我们生活中有哪些类型的工厂呢? 总结一下,可以分为三种:</p><ol><li>自给自足的小作坊-这种工厂产能不大,但是对于重复工作有一套自己的方案</li><li>流水线性的大工厂-已经有了一套相对完善的机器流水线,固定的模式产能效率都有很大提升</li><li>完善的产业链代工厂-这时候已经可以不用关心这个东西怎么出来的,只掌握核心即可</li></ol><p>在代码中,同样也存在现实社会中的上述三种情况,依次对应着我们熟知的简单工厂模式(小作坊),工厂方法模式(大工厂),抽象工厂模式(代工厂)。</p><h2 id="简单工厂模式">简单工厂模式</h2><p>小作坊中,往往制造某一种类商品,比如某章丘铁锅制造坊,某棉花制造坊等等,<strong>简单工厂模式(Simple Factory Pattern)</strong> 就是这样一种模式,由一特定的工厂对象,创造出指定的产品并实例化.使用起来往往只需传入要制造哪类产品(参数)即可。</p><p>现在我们用代码来清晰直观的了解下,现已中华传统美食水饺为例:</p><ol><li>由于水饺有各种各样的内陷,我们做一个顶层接口作为标准</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 各种水饺都有制作过程     */</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>现在,我们准备做韭菜鸡蛋馅的水饺,并且已经录入好了制作方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiveEggDumpling</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作韭菜鸡蛋水饺的过程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>现在我们开始制作韭菜水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> dumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作</span>    dumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来细看上面的三道工序,父类的水饺大类(IDumplings)指向了子类的韭菜馅水饺(ChiveEggDumpling),如果我们需要分别制作各类水饺,就会形成如下代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> chiveEggDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-韭菜馅水饺</span>    chiveEggDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好白菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> cabbageDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-白菜馅水饺</span>    cabbageDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好芹菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> celeryDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-芹菜馅水饺</span>    celeryDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的实际项目中,对象的创建过程远远要比上述代码更为复杂,即使是上述代码,我们依然会觉得臃肿,更何况在实际运用过程中,随着水饺种类越来越多,大量的类似代码迎面扑来,会不会感到窒息呢? 这是时候我们就需要用<strong>简单工厂模式</strong>对代码进行优化,总体思路就是:<strong>细节隐藏,减少依赖</strong>。</p><ol><li>首先-建造水饺制作小作坊</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据你想要的吃的 获取哪种水饺     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IDumplings</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> dumplingName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>dumplingName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"cabbage"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"chiveEgg"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"celery"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>再一次制作我们要的水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//制作韭菜馅水饺</span>    <span class="token class-name">IDumplings</span> chiveEgg <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"chiveEgg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chiveEgg<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作白菜馅水饺</span>    <span class="token class-name">IDumplings</span> cabbage <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"cabbage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cabbage<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作芹菜馅水饺</span>    <span class="token class-name">IDumplings</span> celery <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"celery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    celery<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家有没有发现,最明显的区别在哪,就在于我们不需要知道哪个类制造的,我们只需要知道我们要制作哪种水饺即可。当然,小作坊毕竟是小作坊,水饺种类少了,它足以应对,但是一旦要生产几十种上百种水饺,工厂(工厂类)就要炸锅了,而且,代码本身也不符合开闭原则(开闭原则后续会单独介绍),为了解决<strong>简单工厂模式</strong>的<strong>弊端</strong>,这时候,<strong>工厂方法模式</strong>就来了。</p><h2 id="工厂方法模式">工厂方法模式</h2><p>小作坊已经无法应对我们越来越多的产品种类,这时候工厂升级了!我们需要对流水线作业进行分门别类了,一条流水线就做一类水饺,**工厂方法模式(Factory Method Pattern)**应运而生。</p><p>直接上代码:</p><ol><li>建立我们的大工厂</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 启动水饺流水线     *     * @return 指定水饺的流水线     */</span>    <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建立各种水饺流水线-举个白菜例子,其他类似</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CabbageDumplingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动我们的流水线,制作水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageDumplingFactory</span> cabbageDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启芹菜水饺流水线</span>    <span class="token class-name">CeleryDumplingFactory</span> celeryDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作白菜水饺</span>    cabbageDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作芹菜水饺</span>    celeryDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,我们在上新品类的时候,只需要新增流水线即可,而无需过多关注产品创建的细节,符合开闭原则,但是<strong>工厂方法模式</strong>也存在<strong>弊端</strong>,会导致流水线(类)越来越多。</p><h2 id="抽象工厂模式">抽象工厂模式</h2><p>我们在生产的过程当中,流程都是一样的,比如水饺的生产流程就是1.做皮,2.调馅,3.制作打包。但是这个过程中,做皮是一样的,后续的流程也是不让你随意变动的,<strong>抽象工厂模式</strong>就为解决此类问题而来,话不多说,上代码。</p><ol><li>约定好后续具体步骤</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IStuffing&lt;/p> * 调馅的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:42 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStuffing</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 调配     */</span>    <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IPackage&lt;/p> * 制作打包的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:45 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackage</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 水饺包装盒     */</span>    <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>提供我们的核心技术,以此为基础开始制作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">KernelDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这里用了上等秘方老面,统一制作     * */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作出来水饺皮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 调馅 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IStuffing</span> <span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 打包 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IPackage</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对每个步骤的方法实现具体操作-以芹菜举例</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryStuffing</span> <span class="token keyword">implements</span> <span class="token class-name">IStuffing</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作芹菜馅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryBox</span> <span class="token keyword">implements</span> <span class="token class-name">IPackage</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"芹菜水饺打包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>开始流水线操作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageFactory</span> cabbageFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//做皮</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调馅</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打包</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此,一条完整的流水线就制作成功了,整个制作流程<strong>抽象工厂模式</strong>清晰的描述出来,但是依旧存在缺点,如果我想在流水线中加入一个环节,比如,把水饺做成形状加入进去,全部流水线也都需要调整,完全不符合开闭原则。</p><h2 id="结言">结言</h2><p>至此,三种工厂模式介绍完了,都有各自的优缺点,实际运用中依据自己项目实际情况选择应用,有时候开闭原则不用太过在意遵循,迭代周期一年两年有何不可。文章中提到的源码。可访问我的 <a href="https://github.com/timeroar/timeroar-blog-code.git">github仓库</a> 进行参考。不足之处,也请留言指出</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代码优雅之路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
