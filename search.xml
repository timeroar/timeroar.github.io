<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux环境Docker的安装</title>
      <link href="/posts/24907.html"/>
      <url>/posts/24907.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux环境下Docker的安装"><a href="#Linux环境下Docker的安装" class="headerlink" title="Linux环境下Docker的安装"></a>Linux环境下Docker的安装</h1><p>本文介绍了离线与在线两种安装Docker的方式,本文未提及内容可参考官网:</p><blockquote><p>​    <a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></blockquote><h2 id="Linux下载地址"><a href="#Linux下载地址" class="headerlink" title="Linux下载地址"></a>Linux下载地址</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://mirrors.aliyun.com/centos/7/isos/x86_64/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>博主Linux版本为 <strong>CentOS-7-x86_64-DVD-2009</strong></p><h2 id="删除历史Docker"><a href="#删除历史Docker" class="headerlink" title="删除历史Docker"></a>删除历史Docker</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在线环境"><a href="#在线环境" class="headerlink" title="在线环境"></a>在线环境</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utils \    device-mapper-persistent-data \    lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置docker仓库"><a href="#设置docker仓库" class="headerlink" title="设置docker仓库"></a>设置docker仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum-config-manager \      --add-repo \      https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置阿里云镜像仓库"><a href="#设置阿里云镜像仓库" class="headerlink" title="设置阿里云镜像仓库"></a>设置阿里云镜像仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="阿里云镜像加速器"><a href="#阿里云镜像加速器" class="headerlink" title="阿里云镜像加速器"></a>阿里云镜像加速器</h3><ul><li>访问以下网址登录自己的阿里云账户,查看自己的镜像加速地址</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行以下命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxx.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="离线环境"><a href="#离线环境" class="headerlink" title="离线环境"></a>离线环境</h2><p>离线安装参考官网</p><blockquote><p>​    <a href="https://docs.docker.com/engine/install/binaries/">Install Docker Engine from binaries | Docker Documentation</a></p></blockquote><ol><li>下载官网安装包(建议使用CentoOS 7 17XX 以上版本)</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">https://download.docker.com/linux/static/stable/x86_64/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择自己合适的版本,博主下载版本为<strong>docker-18.09.9.tgz</strong></p><ol start="2"><li>上传至Linux服务器后在文件所在目录执行</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar xzvf docker-18.09.9.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>复制所有docker文件至/user/bin目录下,该目录为环境变量目录</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mv docker&#x2F;* &#x2F;usr&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>执行Docker安装命令</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dockerd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处如果没有异常显示如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">INFO<span class="token punctuation">[</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T06<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">26.836415513</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> <span class="token class-name">Docker</span> daemon                                 commit<span class="token operator">=</span><span class="token number">039</span>a7df9ba <span class="token function">graphdriver</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">=</span>overlay2 version<span class="token operator">=</span><span class="token number">18.09</span><span class="token number">.9</span>INFO<span class="token punctuation">[</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T06<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">26.837355719</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> <span class="token class-name">Daemon</span> has completed initialization          INFO<span class="token punctuation">[</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T06<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">26.858023345</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> API listen on <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接ctrl+c结束即可,此时Docker已经安装成功</p><ol start="5"><li><p>使Docker作为系统服务启动</p><ul><li>为确保服务顺利安装,请先关闭Linux中的selinux策略</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改selinux为disabled</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">SELINUX</span><span class="token punctuation">=</span><span class="token attr-value">disabled</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行重启命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建docker.service文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker.service文件添加以下内容</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[Unit]<span class="token attr-name">Description</span><span class="token punctuation">=</span><span class="token attr-value">Docker Application Container Engine</span><span class="token attr-name">Documentation</span><span class="token punctuation">=</span><span class="token attr-value">https://docs.docker.com</span><span class="token attr-name">After</span><span class="token punctuation">=</span><span class="token attr-value">network-online.target firewalld.service</span><span class="token attr-name">Wants</span><span class="token punctuation">=</span><span class="token attr-value">network-online.target</span>[Service]<span class="token attr-name">Type</span><span class="token punctuation">=</span><span class="token attr-value">notify</span><span class="token comment"># the default is not to use systemd for cgroups because the delegate issues still</span><span class="token comment"># exists and systemd currently does not support the cgroup feature set required</span><span class="token comment"># for containers run by docker</span><span class="token attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token attr-value">/usr/bin/dockerd</span><span class="token attr-name">ExecReload</span><span class="token punctuation">=</span><span class="token attr-value">/bin/kill -s HUP $MAINPID</span><span class="token comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><span class="token comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span><span class="token attr-name">LimitNOFILE</span><span class="token punctuation">=</span><span class="token attr-value">infinity</span><span class="token attr-name">LimitNPROC</span><span class="token punctuation">=</span><span class="token attr-value">infinity</span><span class="token attr-name">LimitCORE</span><span class="token punctuation">=</span><span class="token attr-value">infinity</span><span class="token comment"># Uncomment TasksMax if your systemd version supports it.</span><span class="token comment"># Only systemd 226 and above support this version.</span><span class="token comment">#TasksMax=infinity</span><span class="token attr-name">TimeoutStartSec</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><span class="token attr-name">Delegate</span><span class="token punctuation">=</span><span class="token attr-value">yes</span><span class="token comment"># kill only the docker process, not all processes in the cgroup</span><span class="token attr-name">KillMode</span><span class="token punctuation">=</span><span class="token attr-value">process</span><span class="token comment"># restart the docker process if it exits prematurely</span><span class="token attr-name">Restart</span><span class="token punctuation">=</span><span class="token attr-value">on-failure</span><span class="token attr-name">StartLimitBurst</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">StartLimitInterval</span><span class="token punctuation">=</span><span class="token attr-value">60s</span>[Install]<span class="token attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建docker.socket文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.socket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker.socket文件添加以下内容</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[Unit]<span class="token attr-name">Description</span><span class="token punctuation">=</span><span class="token attr-value">Docker Socket for the API</span><span class="token attr-name">PartOf</span><span class="token punctuation">=</span><span class="token attr-value">docker.service</span>[Socket]<span class="token comment"># If /var/run is not implemented as a symlink to /run, you may need to</span><span class="token comment"># specify ListenStream=/var/run/docker.sock instead.</span><span class="token attr-name">ListenStream</span><span class="token punctuation">=</span><span class="token attr-value">/run/docker.sock</span><span class="token attr-name">SocketMode</span><span class="token punctuation">=</span><span class="token attr-value">0660</span><span class="token attr-name">SocketUser</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">SocketGroup</span><span class="token punctuation">=</span><span class="token attr-value">docker</span>[Install]<span class="token attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token attr-value">sockets.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>赋予上述两个文件执行权限</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod +x &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.servicechmod +x &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>重新加载系统服务</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl daemon-reloadsystemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li>设置开机自启动</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>重启Linux</li></ol><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><ul><li>执行docker启动命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试Docker是否安装成功</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的探索</title>
      <link href="/posts/56241.html"/>
      <url>/posts/56241.html</url>
      
        <content type="html"><![CDATA[<h1 id="并发编程的探索"><a href="#并发编程的探索" class="headerlink" title="并发编程的探索"></a>并发编程的探索</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>顾名思义,并发就是指当前的系统,能够同时承载的访问数量。通常会细定义为TPS与QPS</p><ul><li>TPS(Transaction Processing Systems): 每秒事务处理数量</li><li>QPS(Query Processing Systems) : 每秒查询处理数量</li></ul><p>当然,互联网上对于TPS与QPS还有更细化的解释:</p><blockquote><p>Tps即每秒处理事务数，包括了<br>1、用户请求服务器<br>2、服务器自己的内部查询等处理<br>3、服务器返回给用户<br>这三个过程，每秒能够完成N个这三个过程，Tps也就是N；</p><p>QPS基本类似于TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入QPS之中。每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准<br>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。<br>如果是对一个接口（单场景）压测，且这个接口内部不会再去请求其它接口，那么TPS等于QPS，否则，TPS不等于QPS    </p></blockquote><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h3 id="硬件需求"><a href="#硬件需求" class="headerlink" title="硬件需求"></a>硬件需求</h3><p>一个系统能支持多少的并发量,除了本身软件的架构设计以及代码外,最重要的还是硬件的支撑,而硬件就是我们所熟知的现今计算机基本组成,即硬盘、内存、CPU、网卡以及通讯提供商给予的宽带种类、速率。当硬件达到瓶颈时我们也可以横向扩展,就是我们所说的集群。</p><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><p>软件需求依托于硬件,再多的优化也只能在当前硬件的极限环境内波动,不可能超过硬件的承受范围,这个承受范围的衡量标准,就是<strong>RT(Response Time)</strong> 响应时间。软件方面的优化思路,就是要充分利用好硬件,<strong>多线程</strong>的异步执行,就是充分利用硬件提高并发方式的其中之一。</p><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><p>一个<strong>进程</strong>可以创建多个线程,而<strong>线程</strong>是操作系统进行运算和调度的最小单元,多个线程可以并行执行,而并行执行的数量,原来线程的数量由CPU的核心数决定,但是Intel的超线程技术出来后,这个概念就不再固定,变成了跟CPU线程数决定,也就是我们通常买CPU时所听说的8核16线程。</p><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><ul><li><strong>并行</strong> 并行由CPU的核心数或者线程数决定,意味着可以同时执行的任务数量</li><li><strong>并发</strong> 并发则是只同一时间段内在多个线程内同时执行的数量。由于并行数量的限制,CPU则会通过<strong>时间片切换</strong>的方式来同时执行这些超过本身并行数量的任务。</li></ul><h2 id="时间片轮转调度"><a href="#时间片轮转调度" class="headerlink" title="时间片轮转调度"></a>时间片轮转调度</h2><p>时间片轮转调度,就是我们经常说的时间片切换,引用百度百科含义就是</p><blockquote><p>​    时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。</p><p>时间片轮转调度中唯一有趣的一点是时间片的长度。从一个进程切换到另一个进程是需要一定时间的–保存和装入寄存器值及内存映像，更新各种表格和队列等。</p></blockquote><p>时间片在没有干预的情况下,每段时间片执行时长都是固定的,进程的切换需要耗费较大的资源,而线程的切换只需保存少量寄存器的内容,但是即使这样,时间片的切换依旧需要耗费少量时间,这是不可避免地。</p><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/image-20211031214638502.png" alt="时间片切换" title="时间片切换"></p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>博主是一名默默无闻的Java程序员,故以Java代码举例创建线程的其中三种方式</p><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程启动了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadMethod1</span> threadMethod1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadMethod1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,run方法为具体执行的逻辑,而start则为启动线程</p><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程-实现Runnable接口方式运行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由代码可知,实现Runnable接口的方式仍然需要Thread类中的start方法去启动并且这两类创建方式均没有返回值,场景用于无需关心执行结果的场景。</p><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"当前线程执行成功,这个是返回结果"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadMethod3</span> threadMethod3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>threadMethod3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Callable接口提供了一个带返回值的call方法,返回类型由实现Callable的泛型决定,并用FutureTask类来获取未来任务的结果。 </p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>本文已Java语言距离,在Java中,线程一共有6种状态</p><ul><li>New                新生</li><li>Runnable       运行</li><li>Blocked          阻塞</li><li>Waiting           等待</li><li>TimedWaiting  超时等待</li><li>Terminated     结束</li></ul><p><img src="https://cdn.jsdelivr.net/gh/timeroar/blog-image/blog_image/concurent.png" alt="线程的生命周期示意图" title="线程的生命周期示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 时间片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/posts/20533.html"/>
      <url>/posts/20533.html</url>
      
        <content type="html"><![CDATA[<h1 id="代码优雅之路-设计模式之工厂模式"><a href="#代码优雅之路-设计模式之工厂模式" class="headerlink" title="代码优雅之路-设计模式之工厂模式"></a>代码优雅之路-设计模式之工厂模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>现实中的工厂,就是造东西的,那我们生活中有哪些类型的工厂呢? 总结一下,可以分为三种:</p><ol><li>自给自足的小作坊-这种工厂产能不大,但是对于重复工作有一套自己的方案</li><li>流水线性的大工厂-已经有了一套相对完善的机器流水线,固定的模式产能效率都有很大提升</li><li>完善的产业链代工厂-这时候已经可以不用关心这个东西怎么出来的,只掌握核心即可</li></ol><p>在代码中,同样也存在现实社会中的上述三种情况,依次对应着我们熟知的简单工厂模式(小作坊),工厂方法模式(大工厂),抽象工厂模式(代工厂)。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>小作坊中,往往制造某一种类商品,比如某章丘铁锅制造坊,某棉花制造坊等等,<strong>简单工厂模式(Simple Factory Pattern)</strong> 就是这样一种模式,由一特定的工厂对象,创造出指定的产品并实例化.使用起来往往只需传入要制造哪类产品(参数)即可。</p><p>现在我们用代码来清晰直观的了解下,现已中华传统美食水饺为例:</p><ol><li>由于水饺有各种各样的内陷,我们做一个顶层接口作为标准</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 各种水饺都有制作过程     */</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>现在,我们准备做韭菜鸡蛋馅的水饺,并且已经录入好了制作方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiveEggDumpling</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作韭菜鸡蛋水饺的过程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>现在我们开始制作韭菜水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> dumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作</span>    dumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来细看上面的三道工序,父类的水饺大类(IDumplings)指向了子类的韭菜馅水饺(ChiveEggDumpling),如果我们需要分别制作各类水饺,就会形成如下代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> chiveEggDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-韭菜馅水饺</span>    chiveEggDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好白菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> cabbageDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-白菜馅水饺</span>    cabbageDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好芹菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> celeryDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-芹菜馅水饺</span>    celeryDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的实际项目中,对象的创建过程远远要比上述代码更为复杂,即使是上述代码,我们依然会觉得臃肿,更何况在实际运用过程中,随着水饺种类越来越多,大量的类似代码迎面扑来,会不会感到窒息呢? 这是时候我们就需要用<strong>简单工厂模式</strong>对代码进行优化,总体思路就是:<strong>细节隐藏,减少依赖</strong>。</p><ol><li>首先-建造水饺制作小作坊</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据你想要的吃的 获取哪种水饺     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IDumplings</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> dumplingName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>dumplingName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"cabbage"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"chiveEgg"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"celery"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>再一次制作我们要的水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//制作韭菜馅水饺</span>    <span class="token class-name">IDumplings</span> chiveEgg <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"chiveEgg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chiveEgg<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作白菜馅水饺</span>    <span class="token class-name">IDumplings</span> cabbage <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"cabbage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cabbage<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作芹菜馅水饺</span>    <span class="token class-name">IDumplings</span> celery <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"celery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    celery<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家有没有发现,最明显的区别在哪,就在于我们不需要知道哪个类制造的,我们只需要知道我们要制作哪种水饺即可。当然,小作坊毕竟是小作坊,水饺种类少了,它足以应对,但是一旦要生产几十种上百种水饺,工厂(工厂类)就要炸锅了,而且,代码本身也不符合开闭原则(开闭原则后续会单独介绍),为了解决<strong>简单工厂模式</strong>的<strong>弊端</strong>,这时候,<strong>工厂方法模式</strong>就来了。</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>小作坊已经无法应对我们越来越多的产品种类,这时候工厂升级了!我们需要对流水线作业进行分门别类了,一条流水线就做一类水饺,**工厂方法模式(Factory Method Pattern)**应运而生。</p><p>直接上代码:</p><ol><li>建立我们的大工厂</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 启动水饺流水线     *     * @return 指定水饺的流水线     */</span>    <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建立各种水饺流水线-举个白菜例子,其他类似</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CabbageDumplingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动我们的流水线,制作水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageDumplingFactory</span> cabbageDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启芹菜水饺流水线</span>    <span class="token class-name">CeleryDumplingFactory</span> celeryDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作白菜水饺</span>    cabbageDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作芹菜水饺</span>    celeryDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,我们在上新品类的时候,只需要新增流水线即可,而无需过多关注产品创建的细节,符合开闭原则,但是<strong>工厂方法模式</strong>也存在<strong>弊端</strong>,会导致流水线(类)越来越多。</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>我们在生产的过程当中,流程都是一样的,比如水饺的生产流程就是1.做皮,2.调馅,3.制作打包。但是这个过程中,做皮是一样的,后续的流程也是不让你随意变动的,<strong>抽象工厂模式</strong>就为解决此类问题而来,话不多说,上代码。</p><ol><li>约定好后续具体步骤</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IStuffing&lt;/p> * 调馅的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:42 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStuffing</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 调配     */</span>    <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IPackage&lt;/p> * 制作打包的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:45 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackage</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 水饺包装盒     */</span>    <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>提供我们的核心技术,以此为基础开始制作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">KernelDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这里用了上等秘方老面,统一制作     * */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作出来水饺皮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 调馅 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IStuffing</span> <span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 打包 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IPackage</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对每个步骤的方法实现具体操作-以芹菜举例</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryStuffing</span> <span class="token keyword">implements</span> <span class="token class-name">IStuffing</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作芹菜馅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryBox</span> <span class="token keyword">implements</span> <span class="token class-name">IPackage</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"芹菜水饺打包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>开始流水线操作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageFactory</span> cabbageFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//做皮</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调馅</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打包</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此,一条完整的流水线就制作成功了,整个制作流程<strong>抽象工厂模式</strong>清晰的描述出来,但是依旧存在缺点,如果我想在流水线中加入一个环节,比如,把水饺做成形状加入进去,全部流水线也都需要调整,完全不符合开闭原则。</p><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>至此,三种工厂模式介绍完了,都有各自的优缺点,实际运用中依据自己项目实际情况选择应用,有时候开闭原则不用太过在意遵循,迭代周期一年两年有何不可。文章中提到的源码。可访问我的 <a href="https://github.com/timeroar/timeroar-blog-code.git">github仓库</a> 进行参考。不足之处,也请留言指出</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代码优雅之路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
