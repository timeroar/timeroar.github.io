<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2021/10/29/factory-pattern/"/>
      <url>/2021/10/29/factory-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="代码优雅之路-设计模式之工厂模式"><a href="#代码优雅之路-设计模式之工厂模式" class="headerlink" title="代码优雅之路-设计模式之工厂模式"></a>代码优雅之路-设计模式之工厂模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>现实中的工厂,就是造东西的,那我们生活中有哪些类型的工厂呢? 总结一下,可以分为三种:</p><ol><li>自给自足的小作坊-这种工厂产能不大,但是对于重复工作有一套自己的方案</li><li>流水线性的大工厂-已经有了一套相对完善的机器流水线,固定的模式产能效率都有很大提升</li><li>完善的产业链代工厂-这时候已经可以不用关心这个东西怎么出来的,只掌握核心即可</li></ol><p>在代码中,同样也存在现实社会中的上述三种情况,依次对应着我们熟知的简单工厂模式(小作坊),工厂方法模式(大工厂),抽象工厂模式(代工厂)。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>小作坊中,往往制造某一种类商品,比如某章丘铁锅制造坊,某棉花制造坊等等,<strong>简单工厂模式(Simple Factory Pattern)</strong> 就是这样一种模式,由一特定的工厂对象,创造出指定的产品并实例化.使用起来往往只需传入要制造哪类产品(参数)即可。</p><p>现在我们用代码来清晰直观的了解下,现已中华传统美食水饺为例:</p><ol><li>由于水饺有各种各样的内陷,我们做一个顶层接口作为标准</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 各种水饺都有制作过程     */</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>现在,我们准备做韭菜鸡蛋馅的水饺,并且已经录入好了制作方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiveEggDumpling</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplings</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作韭菜鸡蛋水饺的过程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>现在我们开始制作韭菜水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> dumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作</span>    dumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来细看上面的三道工序,父类的水饺大类(IDumplings)指向了子类的韭菜馅水饺(ChiveEggDumpling),如果我们需要分别制作各类水饺,就会形成如下代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//准备好韭菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> chiveEggDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-韭菜馅水饺</span>    chiveEggDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好白菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> cabbageDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-白菜馅水饺</span>    cabbageDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//准备好芹菜馅水饺的制作工序</span>    <span class="token class-name">IDumplings</span> celeryDumpling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作-芹菜馅水饺</span>    celeryDumpling<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的实际项目中,对象的创建过程远远要比上述代码更为复杂,即使是上述代码,我们依然会觉得臃肿,更何况在实际运用过程中,随着水饺种类越来越多,大量的类似代码迎面扑来,会不会感到窒息呢? 这是时候我们就需要用<strong>简单工厂模式</strong>对代码进行优化,总体思路就是:<strong>细节隐藏,减少依赖</strong>。</p><ol><li>首先-建造水饺制作小作坊</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据你想要的吃的 获取哪种水饺     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IDumplings</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> dumplingName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>dumplingName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"cabbage"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"chiveEgg"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChiveEggDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"celery"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>再一次制作我们要的水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//制作韭菜馅水饺</span>    <span class="token class-name">IDumplings</span> chiveEgg <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"chiveEgg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chiveEgg<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作白菜馅水饺</span>    <span class="token class-name">IDumplings</span> cabbage <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"cabbage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cabbage<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制作芹菜馅水饺</span>    <span class="token class-name">IDumplings</span> celery <span class="token operator">=</span> <span class="token class-name">DumplingFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"celery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    celery<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家有没有发现,最明显的区别在哪,就在于我们不需要知道哪个类制造的,我们只需要知道我们要制作哪种水饺即可。当然,小作坊毕竟是小作坊,水饺种类少了,它足以应对,但是一旦要生产几十种上百种水饺,工厂(工厂类)就要炸锅了,而且,代码本身也不符合开闭原则(开闭原则后续会单独介绍),为了解决<strong>简单工厂模式</strong>的<strong>弊端</strong>,这时候,<strong>工厂方法模式</strong>就来了。</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>小作坊已经无法应对我们越来越多的产品种类,这时候工厂升级了!我们需要对流水线作业进行分门别类了,一条流水线就做一类水饺,**工厂方法模式(Factory Method Pattern)**应运而生。</p><p>直接上代码:</p><ol><li>建立我们的大工厂</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 启动水饺流水线     *     * @return 指定水饺的流水线     */</span>    <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建立各种水饺流水线-举个白菜例子,其他类似</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CabbageDumplingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IDumplings</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumpling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动我们的流水线,制作水饺</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageDumplingFactory</span> cabbageDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启芹菜水饺流水线</span>    <span class="token class-name">CeleryDumplingFactory</span> celeryDumplingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CeleryDumplingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作白菜水饺</span>    cabbageDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始制作芹菜水饺</span>    celeryDumplingFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,我们在上新品类的时候,只需要新增流水线即可,而无需过多关注产品创建的细节,符合开闭原则,但是<strong>工厂方法模式</strong>也存在<strong>弊端</strong>,会导致流水线(类)越来越多。</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>我们在生产的过程当中,流程都是一样的,比如水饺的生产流程就是1.做皮,2.调馅,3.制作打包。但是这个过程中,做皮是一样的,后续的流程也是不让你随意变动的,<strong>抽象工厂模式</strong>就为解决此类问题而来,话不多说,上代码。</p><ol><li>约定好后续具体步骤</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IStuffing&lt;/p> * 调馅的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:42 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStuffing</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 调配     */</span>    <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>IPackage&lt;/p> * 制作打包的过程 * * @author TimeRoar-Wang Ziming * @date 2021/10/29 22:45 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPackage</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 水饺包装盒     */</span>    <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>提供我们的核心技术,以此为基础开始制作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">KernelDumplingFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这里用了上等秘方老面,统一制作     * */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作出来水饺皮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 调馅 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IStuffing</span> <span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 打包 */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">IPackage</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对每个步骤的方法实现具体操作-以芹菜举例</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryStuffing</span> <span class="token keyword">implements</span> <span class="token class-name">IStuffing</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作芹菜馅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打包方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CeleryBox</span> <span class="token keyword">implements</span> <span class="token class-name">IPackage</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"芹菜水饺打包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>开始流水线操作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开启白菜水饺流水线</span>    <span class="token class-name">CabbageFactory</span> cabbageFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CabbageFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//做皮</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">makeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调馅</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打包</span>    cabbageFactory<span class="token punctuation">.</span><span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此,一条完整的流水线就制作成功了,整个制作流程<strong>抽象工厂模式</strong>清晰的描述出来,但是依旧存在缺点,如果我想在流水线中加入一个环节,比如,把水饺做成形状加入进去,全部流水线也都需要调整,完全不符合开闭原则。</p><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>至此,三种工厂模式介绍完了,都有各自的优缺点,实际运用中依据自己项目实际情况选择应用,有时候开闭原则不用太过在意遵循,迭代周期一年两年有何不可。文章中提到的源码。可访问我的 <a href="https://github.com/timeroar/timeroar-blog-code.git">github仓库</a> 进行参考。不足之处,也请留言指出</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
